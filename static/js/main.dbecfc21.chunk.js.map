{"version":3,"sources":["assets/cire.jpg","components/buttons/ButtonText.tsx","components/AppBar.tsx","components/buttons/Button.tsx","components/buttons/ButtonAccent.tsx","components/buttons/ToggleButton.tsx","components/inputs/slider.tsx","components/visualizers/sortingAlgorithms/template.functions.ts","components/visualizers/sortingAlgorithms/MergeSort.tsx","components/visualizers/sortingAlgorithms/QuickSort.tsx","components/visualizers/sortingAlgorithms/HeapSort.ts","components/visualizers/sortingAlgorithms/ShellSort.ts","components/visualizers/sortingAlgorithms/InsertionSort.ts","components/visualizers/sortingAlgorithms/SelectionSort.ts","components/visualizers/SortingVisualizer.tsx","components/inputs/TextField.tsx","components/visualizers/searching/searchingAlgorithms.tsx","components/visualizers/searching/SearchingVisualizer.tsx","components/visualizers/pathFinding/NodeSquare.tsx","components/visualizers/pathFinding/dijkstra.tsx","components/visualizers/pathFinding/Algorithms.tsx","components/visualizers/pathFinding/PathFindingVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonText","props","title","id","className","onClick","handleClick","style","opacity","disabled","pointerEvents","color","active","label","AppBar","useState","activeTab","set_activeTab","activeTabIndicator","n","handleChangeTab","Grid","container","width","position","margin","top","overflow","borderRadius","item","xs","md","Box","component","p","mt","ml","href","display","justifyContent","alignItems","value","mr","target","rel","Avatar","alt","src","cire","Button","padding","ButtonAccent","type","fontSize","ToggleButton","classN","toggleOn","on","set_on","e","height","Slider","onInput","prog","document","getElementById","handleInput","min","max","step","GREEN","PURPLE","RED","ACC","bars","getElementsByClassName","changeColor","index","COLOR","transition","backgroundColor","changeHeight","HEIGHT","arr","ANIMATION_SPEED","descend","animations","MergeSort","nums","speed","descending","callback","returnFrames","divide","Object","assign","length","x","setTimeout","animate","left","right","mid","Math","floor","leftsize","rightsize","leftsub","slice","rightsub","i","j","k","push","merge","mainArray","isDescending","CHANGE","REVERT","SWAP_CHANGE","SWAP_REVERT","sort","midIndex","DIVIDING_POINT","PIVOT","temporary","partition_descending","partition_ascending","QuickSort","numbers","STATE","VALUE_1","VALUE_2","HeapSort","animation_speed","halfSize","heapify","temp","size","root","ShellSort","Array","gap","InsertionSort","y","first","SortingVisualizer","algoOptionsOpen","set_algoOptionsOpen","chosenAlgo","set_chosenAlgo","sortingSpeed","set_sortingSpeed","sortDisabled","set_sortDisabled","generateBtn_disabled","set_generateBtn_disabled","arraySizeButton","set_arraySizeButton","sortSpeed","set_sortSpeed","set_descending","disableDescending","set_disableDescending","sortingAlgoList","arraySize","set_arraySize","generateRandom","array","random","randomNumbers","set_randomNumbers","enablePanels","t","hidden","pl","map","algo","flex","num","m","flexDirection","alignContent","pb","textAlign","changeArraySize","changeSpeed","bottom","indexOf","min_idx","SelectionSort","BubbleSort","memo","TextInput","placeholder","placeHolder","autoFocus","autofocus","event","error","fullWidth","LINEAR_SEARCH_ANIMATIONS","BINARY_SEARCH_ANIMATIONS","getAnimations","searchItem","newFrame","state","lookupIndex","steps","fill_LinearAnimationFrames","sortedArray","binSearch","a","b","fill_BinaryAnimationFrames","lowerBound","upperBound","NoOfSteps","midElement","SearchingVisualizer","searchSize","setSearchSize","setsearchItem","searchArray","setSearchArray","searchSpeed","setSearchSpeed","SortedsearchArray","useRef","sorted","linearSearchMessage","set_linearSearchMessage","binarySearchMessage","set_binarySearchMessage","linearMessageColor","setLinearMessageColor","binaryMessageColor","setBinaryMessageColor","timeouts","lfound","setlfound","bfound","setbfound","animationFrames","CLASSNAME","numberOfFrames","frame","red","executeFrame","changeMessage","ms","items","useEffect","current","each","idx","newSize","alert","ANIMATIONS","LINEAR_ANIMATION","BINARY_ANIMATION","binarySearchWorstTime","log2","clearTimeout","NodeSquare","mouseIsDown","useContext","mouseDownContext","isStart","start","set_start","isFinish","finish","set_finish","classname","box","clearPath","onMouseEnter","s","f","onDragOver","preventDefault","onDrop","prev","classList","add","remove","changeStart","changeFinish","setAttribute","onDragStart","changePrev","MouseDown","obs","contains","ctrlKey","onMouseDown","onMouseUp","console","log","draggable","nodes","setDistance","distance","toString","getDistance","getAttribute","parseInt","isObstacle","getNeighbors","up","down","neighbors","setParent","parent","getParent","parentIndex","backTrack","frames","dijkstra","startIdx","goalIdx","resetNodes","visited","queue","curNode","shift","curID","curNodeID","curDistance","newDistance","node","data","this","undefined","Algorithms","end","animationId","pathStart","pathAnimation","bfs","depth","boxes","Set","startNode","front","pop","has","newNode","createContext","PathFindingVisualizer","algoOptionsDropdown","set_algoOptionsDropdown","name","activeAlgo","setActiveAlgo","setSpeed","algortihms","addBorderWalls","setNodes","setStart","setFinish","prevNode","setPrevNode","isMouseDown","set_isMouseDown","findThePath","en","instant","clearVisited","window","animatePath","handleChangeStart","handleChangeFinish","useMemo","hey","clearObstacles","querySelectorAll","algoOptions","border","makeObstacle","createMaze","halfLen","halfHeight","lmid","hmid","randomX","remainingY","randomY","remainingX","Provider","pr","aria-label","onChange","clearWeights","React","App","currentOpenTab","set_currentOpenTab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dbecfc21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cire.142e653c.jpg\";","export default function ButtonText(props: any)\r\n{\r\n    return (\r\n        <button \r\n            title={props.title} \r\n            id={props.id}\r\n            className={\"btn text-btn\"} \r\n            onClick={props.handleClick}\r\n            style={{opacity: props.disabled ? '.4' : '1', \r\n                    pointerEvents: props.disabled ? 'none':'visible',\r\n                    color: (props.active ? '#0AFFEF': 'white')}}\r\n            >\r\n                \r\n                {props.label}\r\n        </button>\r\n    )\r\n}","import { Box, Grid } from '@material-ui/core';\r\nimport { useState } from 'react';\r\n\r\nimport cire from '../assets/cire.jpg';\r\n\r\nimport ButtonText from './buttons/ButtonText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nexport default function AppBar(props: any) {\r\n\r\n   const [activeTab, set_activeTab] = useState(0);\r\n\r\n   function activeTabIndicator(n: number) {\r\n      set_activeTab(n);\r\n      props.handleChangeTab(n);\r\n   }\r\n\r\n   return (\r\n      <Grid\r\n         container\r\n         className=\"flat-big f-color1\"\r\n         style={{\r\n            width: '98vw', position: 'relative',\r\n            margin: 'auto', top: '1rem', overflow: 'hidden',\r\n            borderRadius: '10px'\r\n         }}\r\n      >\r\n         <Grid\r\n            item xs={6} md={2}\r\n         >\r\n            <Box component=\"h2\" p={1} mt={2} ml={1}>\r\n               <a href=\"https://facebook.com/e.echemane\"> EEs Visualizer </a>\r\n            </Box>\r\n         </Grid>\r\n\r\n         <Grid\r\n            item xs={12} md={8}\r\n         >\r\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mt={1}>\r\n               <ButtonText active={activeTab === 0} handleClick={() => activeTabIndicator(0)} className=\"app-tabs\" label=\"Sorting\" id=\"sort-v-btn\" value=\"0\" />\r\n               <ButtonText active={activeTab === 1} handleClick={() => activeTabIndicator(1)} className=\"app-tabs\" label=\"Searching\" id=\"search-v-btn\" value=\"1\" />\r\n               <ButtonText active={activeTab === 2} handleClick={() => activeTabIndicator(2)} className=\"app-tabs\" label=\"Path Finding\" id=\"pathFinding-v-btn\" value=\"2\" />\r\n            </Box>\r\n\r\n         </Grid>\r\n\r\n         <Grid\r\n            item xs={4} md={2}\r\n            className=\"abs-right\"\r\n         >\r\n            <Box p={1} mt={1} mr={1}>\r\n               <a title=\"Eric Echemane\" href=\"https://github.com/EricEchemane\" target=\"_blank\" rel=\"noreferrer\">\r\n                  <Avatar\r\n                     alt=\"Eric Echemane\" src={cire}\r\n                     className=\"avatar\" />\r\n               </a>\r\n            </Box>\r\n         </Grid>\r\n      </Grid>\r\n   )\r\n}","export default function Button(props: any)\r\n{\r\n\r\n    return (\r\n        <button \r\n            title={props.title} \r\n            id={props.id}\r\n            className={\"oval flat btn b-accent \"} \r\n            onClick={props.handleClick}\r\n            style={{opacity: props.disabled ? '.4' : '1', \r\n                    pointerEvents: props.disabled ? 'none' : 'visible',\r\n                    padding: '.2rem 1.7rem'}}\r\n            >\r\n                {props.label}\r\n        </button>\r\n    )\r\n}","\r\nexport default function ButtonAccent(props: any)\r\n{\r\n    return (\r\n        <button \r\n            title={props.title} \r\n            id={props.id}\r\n            className={\"oval flat btn \" + props.type} \r\n            onClick={props.handleClick}\r\n            style={{opacity: props.disabled ? '.4' : '1', \r\n                    pointerEvents: props.disabled ? 'none':'visible',\r\n                    padding: '0 2rem',\r\n                    borderRadius: '30px',\r\n                color: props.type === \"error\" ? 'white' : '$b-prime',\r\n                fontSize: '1.2rem'\r\n            }}>\r\n\r\n                {props.label}\r\n        </button>\r\n    )\r\n}","import {useState} from 'react';\r\n\r\nexport default function ToggleButton(props: any)\r\n{\r\n    const [on, set_on] = useState(props.toggleOn);\r\n\r\n    function handleClick(event: any) {\r\n        set_on(!on);\r\n        props.handleClick();\r\n    }\r\n\r\n    let classN;\r\n    if(!on) classN = \"oval thin-inset toggle-btn \";\r\n    else classN = \"oval thin-inset toggle-btn-on \" + props.color;\r\n\r\n    return(\r\n        <div\r\n            title={props.title}\r\n            className={classN}\r\n            id={props.id}\r\n            onClick={(e) => handleClick(e)}\r\n            style={{width: '50px', height: '16px',\r\n                    opacity: props.disabled ? '.4' : '1',\r\n                    pointerEvents: props.disabled ? 'none':'visible'}}\r\n            >   \r\n        </div>\r\n    )\r\n}","export default function Slider(props: any)\r\n{   \r\n    function handleInput(e: any) {\r\n        const value = e.target.value;\r\n        let prog = document.getElementById(props.id);        \r\n        if(prog) {\r\n            prog.style.width = (value/2) + \"px\";\r\n        }\r\n        props.onInput(value);\r\n    }\r\n\r\n    return(\r\n        <div \r\n            className=\"d-inline relative slider\"\r\n            style={{\r\n                opacity: props.disabled ? '.4' : '1',\r\n                pointerEvents: props.disabled ? 'none' : 'visible',\r\n                overflow: 'hidden',\r\n                padding: '.5rem'\r\n            }}\r\n            >\r\n                <input \r\n                    onInput={(e) => handleInput(e)}\r\n                    className={\"slider-\" + props.color} \r\n                    type=\"range\" \r\n                    min={props.min}\r\n                    max={props.max} \r\n                    value={props.value}\r\n                    title={props.title}\r\n                    step='1'\r\n                    style={{width: (props.max/2) + \"px\"}}\r\n                    />\r\n                <div className={\"slider-progress-\" + props.color} id={props.id}></div>\r\n        </div>  \r\n    )\r\n}","export const GREEN = \"yellowgreen\";\r\nexport const PURPLE = \"purple\";\r\nexport const RED = \"#dd6f74\";\r\nexport const ACC = \"#0AFFEF\";\r\nexport const GREY = \"rgba(255,255,255,.4)\";\r\n// actual array bars on the screen\r\nlet bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\r\n\r\nexport function changeColor(index: number, COLOR: string)\r\n{    \r\n    if (bars[index]) {\r\n        bars[index].style.transition = '0ms';\r\n        bars[index].style.backgroundColor = COLOR;\r\n    } \r\n}\r\n\r\nexport function changeHeight(index: number, HEIGHT: number)\r\n{\r\n    if (bars[index]) bars[index].style.height = HEIGHT+\"px\";\r\n}","import { changeColor, changeHeight, PURPLE, ACC } from './template.functions';\r\nlet arr = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\nlet descend = false;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n// The function below is where the animation happens\r\n// the sequence divided for every triplet\r\n// the first of the triplet is when the values are being compared thus changing its color\r\n// the second of the tripled is when the values compared and revert its original color\r\n// you can better notice that in smaller array\r\n// finally, the third of the triplet is where the changing the height of a bar\r\n\r\n// ======================== ANIMATE =======================\r\nfunction animate() {\r\n   for (let x = 0; x < animations.length; x++) {\r\n      // change the color if the current iteration is not the third of the triplet\r\n      // example 1: if x = 0 then x % 3 = 0 and not 2 then change the color.\r\n      // example 2: if x = 1 then x % 3 = 0 and not 2 then revert the original color.\r\n      // example 3: if x = 2 then x % 3 = 2 then change the size;\r\n      const isColorChange = x % 3 !== 2;\r\n      if (isColorChange) {\r\n         const color = x % 3 === 0 ? PURPLE : ACC;\r\n         setTimeout(() => {\r\n            changeColor(animations[x][0], color);\r\n            changeColor(animations[x][1], color);\r\n\r\n         }, x * ANIMATION_SPEED);\r\n      }\r\n      // else change the height\r\n      else {\r\n         setTimeout(() => {\r\n            changeHeight(animations[x][0], animations[x][1]);\r\n         }, (x) * (ANIMATION_SPEED));\r\n      }\r\n   }\r\n}\r\n// ======================== entry point =======================\r\nexport default function MergeSort(nums: number[], speed: number, descending: boolean, callback: Function, returnFrames?: boolean) {\r\n   ANIMATION_SPEED = 200 - speed;\r\n   descend = descending;\r\n   animations = [];\r\n   arr = Object.assign([], nums);\r\n   // call the actual merge Sort to push all the animations\r\n   divide(0, arr.length - 1);\r\n\r\n   if (returnFrames) return animations;\r\n\r\n   // actual animation\r\n   animate();\r\n   callback(animations.length)\r\n}\r\n\r\n// ====================== MERGE SORT DIVIDE ============================\r\nfunction divide(left: number, right: number) {\r\n   if (left >= right)\r\n      return;\r\n   const mid = Math.floor((right + left) / 2)\r\n   // left half\r\n   divide(left, mid)\r\n   // right helf\r\n   divide(mid + 1, right)\r\n   // merge left and right\r\n   merge(left, mid, right);\r\n}\r\n// ====================== MERGE SORT COMBINE ============================\r\nfunction merge(left: number, mid: number, right: number) {\r\n   const leftsize = mid - left + 1;\r\n   const rightsize = right - mid;\r\n   const leftsub = arr.slice(left, mid + 1);\r\n   const rightsub = arr.slice(mid + 1);\r\n   let i = 0;\r\n   let j = 0;\r\n   let k = left;\r\n   while (i < leftsize && j < rightsize) {\r\n      // push two animations for color changes\r\n      animations.push([k, (left + leftsize) + j]);\r\n      // push the second time to revert the color\r\n      animations.push([k, (left + leftsize) + j]);\r\n      if (descend) {\r\n         if (leftsub[i] > rightsub[j]) {\r\n            // push the Height changes\r\n            animations.push([k, leftsub[i]]);\r\n            arr[k] = leftsub[i];\r\n            i++; k++;\r\n         }\r\n         else {\r\n            // push the Height changes\r\n            animations.push([k, rightsub[j]]);\r\n            arr[k] = rightsub[j];\r\n            j++; k++;\r\n         }\r\n         continue;\r\n      }\r\n      if (leftsub[i] < rightsub[j]) {\r\n         // push the Height changes\r\n         animations.push([k, leftsub[i]]);\r\n         arr[k] = leftsub[i];\r\n         i++; k++;\r\n      }\r\n      else {\r\n         // push the Height changes\r\n         animations.push([k, rightsub[j]]);\r\n         arr[k] = rightsub[j];\r\n         j++; k++;\r\n      }\r\n   }\r\n   while (i < leftsize) {\r\n      // here we should push a TRIPLET to maintain the ratio of the animatino sequence\r\n      animations.push([left + i, left + i]);\r\n      animations.push([left + i, left + i]);\r\n      animations.push([k, leftsub[i]]);\r\n\r\n      arr[k] = leftsub[i];\r\n      i++;\r\n      k++;\r\n   }\r\n\r\n   while (j < rightsize) {\r\n      animations.push([right + j, right + j]);\r\n      animations.push([right + j, right + j]);\r\n      animations.push([k, rightsub[j]]);\r\n\r\n      arr[k] = rightsub[j];\r\n      j++;\r\n      k++;\r\n   }\r\n}\r\n","// `\r\n// ANIMATION STRATEGY: \r\n//     Each iteraton in animations array is also an array\r\n//     that has 3 elements. \r\n// Examples:\r\n//      [CHANGE, index, pivot],\r\n//      [REVERT, index, pivot],\r\n//      [SWAP_CHANGE, index1, index2],\r\n//      [SWAP_REVERT, index1, index2]\r\n// Basically, this means that if we found a CHANGE,\r\n// we will change the color of the bars[index],\r\n// if we found a REVERT then change its color back to normal,\r\n// if SWAP_CHANGE, change their colors and swap. \r\n// That means that the height of bars[inde1] will be the \r\n// height of bars[index2] and vice versa.\r\n// Finally, if we found SWAP_REVERT we will just simply \r\n// change the color back to normal\r\n// `\r\n\r\nimport {\r\n    changeColor,\r\n    changeHeight,\r\n    PURPLE,\r\n    RED,\r\n    GREEN,\r\n    ACC\r\n} from './template.functions';\r\n\r\n//  ======================================== DEPENDENT  VARIABLES <<<\r\nlet mainArray = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\nlet isDescending = false;\r\n\r\n// ========================================= INDEPENDENT VARIABLES\r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// ==================================================== ANIMATION animate()\r\nfunction animate() {\r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n// ===================================================== PARTITION DESCENDING\r\nfunction partition_descending(left: number, right: number, PIVOT: number) {    \r\n    while (left <= right) {\r\n        // here we will push the animation comparision\r\n        // example: animation.comparision.push([left, right])\r\n        // because we are comparing left and right\r\n        while (mainArray[left] > PIVOT){\r\n            animations.push([\r\n                CHANGE,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            left++;\r\n        }\r\n        while (mainArray[right] < PIVOT){\r\n            animations.push([\r\n                CHANGE,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            right--; \r\n        }\r\n        if (left <= right) {\r\n            animations.push([\r\n                SWAP_CHANGE,\r\n                left,\r\n                right\r\n            ])\r\n            animations.push([\r\n                SWAP_REVERT,\r\n                left,\r\n                right\r\n            ])\r\n            // here I'm swapping left and aright\r\n            let temporary = mainArray[left];\r\n            mainArray[left] = mainArray[right];\r\n            mainArray[right] = temporary;\r\n\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\n// ===================================================== PARTITION ASCENDING\r\nfunction partition_ascending(left: number, right: number, PIVOT: number) {    \r\n    while (left <= right) {\r\n        // here we will push the animation comparision\r\n        // example: animations.comparision.push([left, right])\r\n        // because we are comparing left and right\r\n        while (mainArray[left] < PIVOT) {\r\n            animations.push([\r\n                CHANGE,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            left++;\r\n        }\r\n            \r\n        while (mainArray[right] > PIVOT) {\r\n            animations.push([\r\n                CHANGE,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            right--; \r\n        }\r\n               \r\n        if (left <= right) {\r\n            animations.push([\r\n                SWAP_CHANGE,\r\n                left,\r\n                right\r\n            ])\r\n            animations.push([\r\n                SWAP_REVERT,\r\n                left,\r\n                right\r\n            ])\r\n            // here I'm swapping left and aright\r\n            let temporary = mainArray[left];\r\n            mainArray[left] = mainArray[right];\r\n            mainArray[right] = temporary;\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\n// ===================================================== SORT\r\nfunction sort(left: number, right: number) {\r\n    if (left >= right)\r\n        return;\r\n    // here I choose the middle element as a PIVOT\r\n    let midIndex = (left + right) / 2;\r\n    // console.log(midIndex);\r\n    // make sure to always floor the mid to avoid infinite loop\r\n    midIndex = Math.floor(midIndex);\r\n    let PIVOT = mainArray[midIndex];\r\n    // here, partition should return the index of the pivot \r\n    // or the element that is already in correct position\r\n    let DIVIDING_POINT: number;\r\n    if(isDescending)\r\n        DIVIDING_POINT = partition_descending(left, right, PIVOT);\r\n    else\r\n        DIVIDING_POINT = partition_ascending(left, right, PIVOT);\r\n    sort(left, DIVIDING_POINT - 1);\r\n    sort(DIVIDING_POINT, right);\r\n}\r\n\r\n// ================================================== ENTRY POINT\r\nexport default function QuickSort(\r\n    numbers: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    ANIMATION_SPEED = 200 - speed;\r\n    isDescending = descending;  \r\n    mainArray = Object.assign([], numbers);\r\n    // always clear the animations \r\n    animations = [];\r\n    // ACTUAL QUICK SORT CALL\r\n\r\n    sort(0, mainArray.length - 1);\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length);\r\n}","import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet mainArray = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\nlet isDescending = false;\r\n\r\n// ======================================= constants Variables\r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// ======================================= ENTRY POINT\r\nexport default function HeapSort(\r\n    numbers: number[],\r\n    animation_speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean\r\n)\r\n{\r\n    ANIMATION_SPEED = 200 - animation_speed;\r\n    isDescending = descending;\r\n    mainArray = Object.assign([], numbers);\r\n    animations = [];\r\n    // actual call of heapsort algorithm\r\n    sort();\r\n    if (returnFrames) return animations;\r\n    // animate\r\n    animate();\r\n    callback(animations.length)\r\n}\r\n\r\n// ======================================== animation \r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ======================================== Sort\r\nfunction sort() {\r\n    let halfSize = mainArray.length / 2;\r\n    halfSize = Math.floor(halfSize);\r\n    \r\n    for (let x = halfSize; x >= 0; x--) {\r\n        heapify(mainArray.length, x);\r\n    }\r\n    for (let x = mainArray.length - 1; x > 0; x--)\r\n    {\r\n        animations.push([SWAP_CHANGE, x, 0])\r\n        animations.push([SWAP_REVERT, x, 0])\r\n        const temp = mainArray[0];\r\n        mainArray[0] = mainArray[x]\r\n        mainArray[x] = temp;\r\n        heapify(x, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(size: number, root: number) {\r\n    if (root >= size)\r\n        return;\r\n\r\n    let left = (2 * root) + 1;\r\n    let right = (2 * root) + 2;\r\n\r\n    if (left < size) {\r\n        // comparision\r\n        animations.push([CHANGE, left, root])\r\n        animations.push([REVERT, left, root])\r\n\r\n        if (!isDescending) {\r\n            if (mainArray[left] > mainArray[root]) {    \r\n\r\n                animations.push([SWAP_CHANGE, left, root])\r\n                animations.push([SWAP_REVERT, left, root])\r\n\r\n                const temp = mainArray[left];\r\n                mainArray[left] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }    \r\n        }\r\n        else {\r\n            if (mainArray[left] < mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, left, root])\r\n                animations.push([SWAP_REVERT, left, root])\r\n               \r\n                const temp = mainArray[left];\r\n                mainArray[left] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n            \r\n    }\r\n    if (right < size) {\r\n        // comparision\r\n        animations.push([CHANGE, right, root])\r\n        animations.push([REVERT, right, root])\r\n        if (!isDescending) {\r\n          \r\n            if (mainArray[right] > mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, right, root])\r\n                animations.push([SWAP_REVERT, right, root])\r\n               \r\n                const temp = mainArray[right];\r\n                mainArray[right] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n        else {\r\n            if (mainArray[right] < mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, right, root])\r\n                animations.push([SWAP_REVERT, right, root])\r\n                \r\n                const temp = mainArray[right];\r\n                mainArray[right] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n    }\r\n    heapify(size, left);\r\n    heapify(size, right);\r\n}","import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function ShellSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean )\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums )\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // actual algo\r\n    let gap = Math.floor(mainArray.length / 2);\r\n    while ( gap >= 1) {\r\n        for (let j = gap; j < mainArray.length; j++) {\r\n            for (let i = j - gap; i >= 0; i -= gap) {\r\n\r\n                animations.push([CHANGE, i+gap, i])\r\n                animations.push([REVERT, i+gap, i])\r\n\r\n                if (!descending) {\r\n                    if (mainArray[i + gap] > mainArray[i]) break;    \r\n                }else\r\n                    if (mainArray[i + gap] < mainArray[i]) break;    \r\n                \r\n                animations.push([SWAP_CHANGE, i+gap, i])\r\n                animations.push([SWAP_REVERT, i+gap, i])\r\n\r\n                const temp = mainArray[i + gap]\r\n                mainArray[i + gap] = mainArray[i]\r\n                mainArray[i] = temp;\r\n            }\r\n        }\r\n        gap = Math.floor(gap / 2)\r\n    }\r\n\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length);\r\n}","import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function InsertionSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean) \r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums )\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // actual algo\r\n    let size = mainArray.length;\r\n    for (let x = 1; x < size; x++)\r\n    {\r\n        animations.push([CHANGE, x, x-1])\r\n        animations.push([REVERT, x, x-1])\r\n\r\n        if (!descending) {\r\n            if (mainArray[x - 1] > mainArray[x])\r\n            {\r\n                for (let y = x; y > 0; y--)\r\n                {\r\n                    animations.push([CHANGE, y, y-1])\r\n                    animations.push([REVERT, y, y-1])\r\n\r\n                    if (mainArray[y] < mainArray[y - 1]) {\r\n\r\n                        animations.push([SWAP_CHANGE, y, y-1])\r\n                        animations.push([SWAP_REVERT, y, y-1])\r\n\r\n                        const temp = mainArray[y];\r\n                        mainArray[y] = mainArray[y - 1]\r\n                        mainArray[y - 1] = temp\r\n                    }\r\n                }\r\n            }            \r\n        }\r\n        else {\r\n            if (mainArray[x - 1] < mainArray[x])\r\n            {\r\n                for (let y = x; y > 0; y--)\r\n                {\r\n                    animations.push([CHANGE, y, y-1])\r\n                    animations.push([REVERT, y, y-1])\r\n\r\n                    if (mainArray[y] > mainArray[y - 1]) {\r\n\r\n                        animations.push([SWAP_CHANGE, y, y-1])\r\n                        animations.push([SWAP_REVERT, y, y-1])\r\n\r\n                        const temp = mainArray[y];\r\n                        mainArray[y] = mainArray[y - 1]\r\n                        mainArray[y - 1] = temp\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)\r\n}\r\n    ","import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function SelectionSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums)\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // act ual algo\r\n    let size = mainArray.length\r\n    var i: number, j: number, min_idx: number;\r\n\r\n    for (i = 0; i < size - 1; i++)\r\n    {\r\n        min_idx = i;\r\n\r\n        for (j = i + 1; j < size; j++) {\r\n            \r\n            animations.push([CHANGE, j, min_idx])\r\n            animations.push([REVERT, j, min_idx])\r\n            if (descending) {\r\n                if (mainArray[j] > mainArray[min_idx]) min_idx = j;\r\n            }\r\n            else {\r\n                if (mainArray[j] < mainArray[min_idx]) min_idx = j;\r\n            }\r\n        }\r\n        animations.push([SWAP_CHANGE, i, min_idx])\r\n        animations.push([SWAP_REVERT, i, min_idx])\r\n\r\n        const temp = mainArray[min_idx]\r\n        mainArray[min_idx] = mainArray[i]\r\n        mainArray[i] = temp;\r\n    }\r\n    // animations start\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)    \r\n}\r\n\r\nexport function BubbleSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums)\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // act ual algo\r\n    let size = mainArray.length\r\n\r\n    for (let i = 0; i < size - 1; i++)\r\n    {\r\n        for (let j = i + 1; j < size; j++) {\r\n\r\n            animations.push([CHANGE, i, j])\r\n            animations.push([REVERT, i, j])\r\n\r\n            if (!descending) {\r\n                if (mainArray[i] > mainArray[j]) {\r\n                    animations.push([SWAP_CHANGE, i, j])        \r\n                    animations.push([SWAP_REVERT, i, j])  \r\n                    const temp = mainArray[i]      \r\n                    mainArray[i] = mainArray[j]\r\n                    mainArray[j] = temp;\r\n                }\r\n            }\r\n            else {\r\n                if (mainArray[i] < mainArray[j]) {\r\n                    animations.push([SWAP_CHANGE, i, j])        \r\n                    animations.push([SWAP_REVERT, i, j])   \r\n                    const temp = mainArray[i]     \r\n                    mainArray[i] = mainArray[j]\r\n                    mainArray[j] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // animations start\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)    \r\n}","import { useState, memo } from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport Button from '../../components/buttons/Button';\r\nimport ButtonAccent from '../../components/buttons/ButtonAccent';\r\nimport ToggleButton from '../../components/buttons/ToggleButton';\r\nimport Slider from '../../components/inputs/slider';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\n// Algorithms\r\nimport MergeSort from './sortingAlgorithms/MergeSort';\r\nimport QuickSort from './sortingAlgorithms/QuickSort';\r\nimport HeapSort from './sortingAlgorithms/HeapSort';\r\nimport ShellSort from './sortingAlgorithms/ShellSort';\r\nimport InsertionSort from './sortingAlgorithms/InsertionSort';\r\nimport SelectionSort from './sortingAlgorithms/SelectionSort';\r\nimport { BubbleSort } from './sortingAlgorithms/SelectionSort';\r\n\r\n// this indicates that the page loads for the first time\r\nlet first = true;\r\nfunction SortingVisualizer(props: any): JSX.Element {\r\n\r\n   const [algoOptionsOpen, set_algoOptionsOpen] = useState(false);\r\n   const [chosenAlgo, set_chosenAlgo] = useState(\"Choose an algorithm\");\r\n   const [sortingSpeed, set_sortingSpeed] = useState(180);\r\n   const [sortDisabled, set_sortDisabled] = useState(true);\r\n   const [generateBtn_disabled, set_generateBtn_disabled] = useState(false);\r\n   const [arraySizeButton, set_arraySizeButton] = useState(false);\r\n   const [sortSpeed, set_sortSpeed] = useState(false);\r\n   const [descending, set_descending] = useState(false);\r\n   const [disableDescending, set_disableDescending] = useState(false);\r\n   const sortingAlgoList = [\r\n      \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Shell Sort\", \"Insertion Sort\",\r\n      \"Selection Sort\", \"Bubble Sort\"\r\n   ];\r\n\r\n   const [arraySize, set_arraySize] = useState(150)\r\n\r\n   // random numbers generator range from 2 to 300\r\n   function generateRandom(size: number) {\r\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\r\n      for (let x = 0; x < bars.length; x++) {\r\n         if (bars[x]) {\r\n            bars[x].style.backgroundColor = \"#0AFFEF\"\r\n            bars[x].style.transition = '.2s ease';\r\n         }\r\n      }\r\n      const array = [];\r\n      for (let x = 0; x < size; x++) {\r\n         const random = Math.floor(Math.random() * (300 - 2 + 1) + 2)\r\n         array.push(random);\r\n      }\r\n      return array;\r\n   }\r\n   // THe State Randome Numbers Array\r\n   const [randomNumbers, set_randomNumbers] = useState(generateRandom(150));\r\n\r\n   function changeArraySize(n: any) {\r\n      set_arraySize(n);\r\n      set_randomNumbers(generateRandom(n));\r\n      if (!first) {\r\n         set_sortDisabled(false);\r\n      }\r\n   }\r\n\r\n   function sort() {\r\n      // check what algorithm to be use\r\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\r\n      for (let x = 0; x < bars.length; x++) {\r\n         if (bars[x]) {\r\n            bars[x].style.backgroundColor = \"red\"\r\n         }\r\n      }\r\n      const index = sortingAlgoList.indexOf(chosenAlgo)\r\n      first = false;\r\n      set_sortDisabled(true);\r\n      set_arraySizeButton(true);\r\n      set_sortSpeed(true);\r\n      set_generateBtn_disabled(true)\r\n      set_disableDescending(true)\r\n\r\n      if (index === 0) MergeSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n      else if (index === 1) QuickSort(randomNumbers, sortingSpeed, descending, enablePanels)\r\n      else if (index === 2) HeapSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n      else if (index === 3) ShellSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n      else if (index === 4) InsertionSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n      else if (index === 5) SelectionSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n      else if (index === 6) BubbleSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n   }\r\n\r\n   function enablePanels(t: number) {\r\n      setTimeout(() => {\r\n         set_generateBtn_disabled(false)\r\n         set_arraySizeButton(false);\r\n         set_sortSpeed(false);\r\n         set_disableDescending(false);\r\n      }, t * (200 - sortingSpeed))\r\n   }\r\n\r\n   function changeSpeed(n: number) {\r\n      set_sortingSpeed(n);\r\n   }\r\n\r\n   return (\r\n      <Box\r\n         p={4}\r\n         className=\"flat\"\r\n         style={{\r\n            width: '98vw', height: '80vh', position: 'relative',\r\n            margin: 'auto', top: '1rem', overflow: 'hidden',\r\n            borderRadius: '10px'\r\n         }}>\r\n\r\n\r\n         <Box id=\"sorting-windows\">\r\n            <div className=\"bars-container\">\r\n               <div className=\"algo-options\">\r\n                  <Box className={\"sorting-algorithms\"} hidden={!algoOptionsOpen} >\r\n                     <div style={{ pointerEvents: 'none' }} > <Box p={2} pl={1}>  </Box> </div>\r\n                     {\r\n                        sortingAlgoList.map((algo: any, index: number) =>\r\n                           <div key={index}> <Box p={1} pl={2} onClick={() => {\r\n                              set_chosenAlgo(algo);\r\n                              set_algoOptionsOpen(false);\r\n                              set_sortDisabled(false)\r\n                           }} > {algo} </Box> </div>\r\n                        )\r\n                     }\r\n                  </Box>\r\n                  <Box flex={1} onClick={() => { set_algoOptionsOpen(!algoOptionsOpen) }} >\r\n                     {chosenAlgo}\r\n                  </Box>\r\n                  <Box onClick={() => { set_algoOptionsOpen(!algoOptionsOpen) }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" > <ArrowDropDownIcon /> </Box>\r\n               </div>\r\n               {\r\n                  randomNumbers.map((num: number, index: number) =>\r\n                     <div className=\"bars\" style={{ height: num + 'px' }} key={index} > </div>\r\n                  )\r\n               }\r\n            </div>\r\n\r\n         </Box>\r\n\r\n         <div id=\"scroll\" >\r\n\r\n            <Box className=\"sorting-panel\">\r\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                  <Button disabled={generateBtn_disabled} label=\"Generate New Array\" handleClick={() => {\r\n                     set_randomNumbers(generateRandom(arraySize));\r\n                     if (!first) {\r\n                        set_sortDisabled(false);\r\n                        first = false;\r\n                     }\r\n                  }} />\r\n               </Box>\r\n\r\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                  <Box pb={1} textAlign=\"center\" > Change Array Size </Box>\r\n                  <Slider disabled={arraySizeButton} id=\"array_size\" onInput={(n: any) => changeArraySize(n)} color=\"accent\" min={5} max={300} value={arraySize} />\r\n               </Box>\r\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                  <Box pb={1} textAlign=\"center\" > Change Speed </Box>\r\n                  <Slider disabled={sortSpeed} id=\"sorting-speed\" onInput={(n: any) => changeSpeed(n)} color=\"error\" min={5} max={198} value={sortingSpeed} />\r\n               </Box>\r\n               <Box m={2} style={{ position: 'relative', bottom: '2px' }} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                  <Box pb={1} textAlign=\"center\" > Descending </Box>\r\n                  <ToggleButton disabled={disableDescending} toggleOn={descending} color=\"accent\" title=\"Descending\" handleClick={() => {\r\n                     set_descending(!descending);\r\n                     if (!first) {\r\n                        set_sortDisabled(false)\r\n                        first = false;\r\n                     }\r\n                  }} />\r\n               </Box>\r\n\r\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                  <ButtonAccent label=\"Sort !\" disabled={sortDisabled} handleClick={sort} title=\"Start sorting\" type=\"error\" />\r\n               </Box>\r\n            </Box>\r\n         </div>\r\n      </Box>\r\n   )\r\n}\r\nexport default memo(SortingVisualizer);","\r\nexport default function TextInput (props: any)\r\n{\r\n\r\n    return (\r\n        <input \r\n            type={props.type}\r\n            className={\"thin-inset textInput\"}\r\n            placeholder={props.placeHolder}\r\n            autoFocus={props.autofocus}\r\n            onInput={(event: any) => {\r\n                const value = event.target.value;\r\n                props.handleInput(value)\r\n            }}\r\n            id={props.id}\r\n            style={{color: props.error ? '#FF555D' : 'white',\r\n                    width: props.fullWidth ? '100%': 'auto'}}\r\n            />\r\n    )\r\n}","let FOUND = 1;\r\nlet CHANGE_COLOR = 0;\r\nlet REVERT_COLOR = -1;\r\n\r\ninterface Frame {\r\n   state: number, // the options are the variables above\r\n   lookupIndex: number, // the index in the array\r\n   steps: number // steps it takes to find\r\n}\r\n\r\nlet LINEAR_SEARCH_ANIMATIONS = [] as Frame[];\r\nlet BINARY_SEARCH_ANIMATIONS = [] as Frame[];\r\n\r\nexport default function getAnimations(array: number[], searchItem: number) {\r\n   // call this first...\r\n   resetAnimations();\r\n   fill_LinearAnimationFrames(array, searchItem);\r\n   fill_BinaryAnimationFrames(array, searchItem);\r\n\r\n   return [\r\n      LINEAR_SEARCH_ANIMATIONS,\r\n      BINARY_SEARCH_ANIMATIONS\r\n   ];\r\n}\r\n\r\nfunction resetAnimations() {\r\n   LINEAR_SEARCH_ANIMATIONS = []\r\n   BINARY_SEARCH_ANIMATIONS = []\r\n}\r\n\r\n// -----> fill linear animation frams\r\nfunction fill_LinearAnimationFrames(array: number[], searchItem: number) {\r\n   for (let x = 0; x < array.length; x++) {\r\n      let newFrame: Frame;\r\n      if (array[x] == searchItem) {\r\n         newFrame = {\r\n            state: FOUND,\r\n            lookupIndex: x, // the index where the saerchItem were found\r\n            steps: x + 1 // the steps it takes two find the searchItem\r\n         }\r\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\r\n         // FOR DEBUGGING PURPOSES\r\n         // alert(`${searchItem} has been found at index ${x}`)\r\n         return;\r\n      }\r\n      else {\r\n         // push a frame where that indicates to change color\r\n         newFrame = {\r\n            state: CHANGE_COLOR,\r\n            lookupIndex: x, // current index where we look at\r\n            steps: x + 1\r\n         }\r\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\r\n         // here we need to push another one to change the color back to normal\r\n         newFrame = {\r\n            state: REVERT_COLOR,\r\n            lookupIndex: x, // current index where we look at\r\n            steps: x + 1\r\n         }\r\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\r\n      }\r\n   }\r\n}\r\n\r\n// -----> BINARY SEARCH\r\nfunction fill_BinaryAnimationFrames(array: number[], searchItem: number) {\r\n   let sortedArray = new Array(array.length);\r\n   sortedArray = Object.assign([], array);\r\n   sortedArray = sortedArray.sort((a: number, b: number) => a - b);\r\n   // console.log(searchItem)\r\n   // console.log(sortedArray)\r\n   binSearch(\r\n      sortedArray,\r\n      searchItem,\r\n      0,\r\n      sortedArray.length - 1,\r\n      0\r\n   )\r\n}\r\n\r\nfunction binSearch(\r\n   sortedArray: number[],\r\n   searchItem: number,\r\n   lowerBound: number,\r\n   upperBound: number,\r\n   NoOfSteps: number): number {\r\n\r\n   if (lowerBound > upperBound) return -1;\r\n\r\n   NoOfSteps += 1;\r\n   let midIndex = (upperBound + lowerBound + 1) / 2;\r\n   midIndex = Math.floor(midIndex);\r\n   let midElement = sortedArray[midIndex];\r\n\r\n   let newFrame: Frame;\r\n\r\n   if (midElement == searchItem) {\r\n      newFrame = {\r\n         state: FOUND,\r\n         lookupIndex: midIndex,\r\n         steps: NoOfSteps\r\n      }\r\n      BINARY_SEARCH_ANIMATIONS.push(newFrame);\r\n      // FOR DEBUGGING PURPOSES\r\n      // alert(`found at index ${midIndex}`)\r\n      return midIndex;\r\n   }\r\n   // if not the middle check the lower bound\r\n   // if the searchItem is less than mid Element\r\n   newFrame = {\r\n      state: CHANGE_COLOR,\r\n      lookupIndex: midIndex,\r\n      steps: NoOfSteps\r\n   }\r\n   BINARY_SEARCH_ANIMATIONS.push(newFrame);\r\n   newFrame = {\r\n      state: REVERT_COLOR,\r\n      lookupIndex: midIndex,\r\n      steps: NoOfSteps\r\n   }\r\n   BINARY_SEARCH_ANIMATIONS.push(newFrame);\r\n\r\n   if (searchItem < midElement) {\r\n      return binSearch(\r\n         sortedArray,\r\n         searchItem,\r\n         lowerBound,\r\n         midIndex - 1,\r\n         NoOfSteps\r\n      )\r\n   }\r\n   // otherwise\r\n   return binSearch(\r\n      sortedArray,\r\n      searchItem,\r\n      midIndex + 1,\r\n      upperBound,\r\n      NoOfSteps\r\n   )\r\n}","import { useState, useEffect, useRef, memo } from 'react'\r\nimport { Box } from '@material-ui/core';\r\nimport TextField from '../../inputs/TextField';\r\nimport ButtonAccent from '../../buttons/ButtonAccent';\r\nimport Button from '../../buttons/Button';\r\nimport getAnimations from './searchingAlgorithms';\r\n\r\nfunction SearchingVisualizer()\r\n{\r\n   // ---> States\r\n   const [searchSize, setSearchSize] = useState(200)\r\n   const [searchItem, setsearchItem] = useState(-1);\r\n   const [searchArray, setSearchArray] = useState(generateRandom(searchSize));\r\n   const [searchSpeed, setSearchSpeed] = useState(300);\r\n   const SortedsearchArray = useRef(sorted());\r\n\r\n   const [linearSearchMessage, set_linearSearchMessage] = useState(\"Linear Search\")\r\n   const [binarySearchMessage, set_binarySearchMessage] = useState(\"Binary Search\")\r\n   const [linearMessageColor, setLinearMessageColor] = useState(\"white\")\r\n   const [binaryMessageColor, setBinaryMessageColor] = useState(\"white\")\r\n   const [timeouts, setTimeouts] = useState([] as any)\r\n   const [lfound, setlfound] = useState(false)\r\n   const [bfound, setbfound] = useState(false)\r\n\r\n   // -----> UseEffect\r\n\r\n   useEffect(() => {\r\n      SortedsearchArray.current = sorted()\r\n   }, [searchArray])\r\n\r\n\r\n   // ---> Functions\r\n\r\n   function animate(animationFrames: any[], CLASSNAME: string) {\r\n      let CHANGE_COLOR = 0;\r\n      let REVERT_COLOR = -1;\r\n      const numberOfFrames = animationFrames.length;\r\n\r\n      for (let x = 0; x < numberOfFrames; x++) {\r\n         const frame = animationFrames[x];\r\n         const state = frame.state\r\n         const steps = frame.steps\r\n         const index = frame.lookupIndex\r\n         // const accent = '#0AFFEF';\r\n         const red = '#dd6f74';\r\n         if (state === CHANGE_COLOR) executeFrame(CLASSNAME, index, red, x)\r\n         else if (state === REVERT_COLOR) executeFrame(CLASSNAME, index, red, x)\r\n         else {\r\n            executeFrame(CLASSNAME, index, 'yellowgreen', x)\r\n            if (CLASSNAME === 'linear-bar') {\r\n               changeMessage('linear-bar', index, steps, x);\r\n            }\r\n            else {\r\n               changeMessage('binary-bar', index, steps, x);\r\n            }\r\n            return;\r\n         }\r\n      }\r\n   }\r\n\r\n   function changeMessage(CLASSNAME: string, index: number, steps: number, ms: number) {\r\n      timeouts.push(setTimeout(() => {\r\n         if (CLASSNAME === 'binary-bar') {\r\n            setbfound(true);\r\n            set_binarySearchMessage(`Found at index ${index} in ${steps} steps.`);\r\n            setBinaryMessageColor('yellowgreen');\r\n            return;\r\n         }\r\n         setlfound(true);\r\n         set_linearSearchMessage(`Found at index ${index} in ${steps} steps.`);\r\n         setLinearMessageColor('yellowgreen');\r\n      }, ms * (301 - searchSpeed)))\r\n   }\r\n\r\n   function executeFrame(CLASSNAME: string, x: number, COLOR: string, ms: number) {\r\n      timeouts.push(\r\n         setTimeout(() => {\r\n            changeColor(CLASSNAME, x, COLOR);\r\n         }, ms * (301 - searchSpeed)))\r\n   }\r\n\r\n   function changeColor(CLASSNAME: string, index: number, COLOR: string) {\r\n      const items = (document.getElementsByClassName(CLASSNAME) as HTMLCollectionOf<HTMLElement>)\r\n      if (items[index]) {\r\n         items[index].style.backgroundColor = COLOR;\r\n      }\r\n   }\r\n\r\n   function searchNow() {\r\n      setlfound(false)\r\n      setbfound(false)\r\n      if (searchItem < 0) {\r\n         alert('Please input a positive integer.')\r\n         return;\r\n      }\r\n\r\n      for (let x = 0; x < searchArray.length; x++) {\r\n         changeColor('linear-bar', x, '#0AFFEF')\r\n         changeColor('binary-bar', x, '#0AFFEF')\r\n      }\r\n\r\n      set_binarySearchMessage('Searching binary...')\r\n      set_linearSearchMessage('Searching linearly...');\r\n      setBinaryMessageColor('rgba(255,255,255,.7)')\r\n      setLinearMessageColor('rgba(255,255,255,.7)')\r\n\r\n      let ANIMATIONS = getAnimations(searchArray, searchItem)\r\n      let LINEAR_ANIMATION = ANIMATIONS[0]\r\n      let BINARY_ANIMATION = ANIMATIONS[1]\r\n\r\n      animate(LINEAR_ANIMATION, 'linear-bar');\r\n\r\n      if (LINEAR_ANIMATION.length === searchArray.length * 2) {\r\n         timeouts.push(setTimeout(() => {\r\n            set_linearSearchMessage(`Item ${searchItem} not found.`)\r\n            setLinearMessageColor('red')\r\n         }, (searchArray.length * 2) * (301 - searchSpeed)))\r\n      }\r\n\r\n      animate(BINARY_ANIMATION, 'binary-bar');\r\n      let binarySearchWorstTime = (Math.floor(Math.log2(searchArray.length)) * 2);\r\n\r\n      if (BINARY_ANIMATION.length === binarySearchWorstTime || BINARY_ANIMATION.length === binarySearchWorstTime+2) {\r\n         timeouts.push(setTimeout(() => {\r\n            setbfound(true);\r\n            set_binarySearchMessage(`Item ${searchItem} not found.`)\r\n            setBinaryMessageColor('red')\r\n         }, (binarySearchWorstTime) * (301 - searchSpeed)))\r\n      }\r\n   }\r\n\r\n   function changeSize(newSize: number) {\r\n      setSearchSize(newSize);\r\n      setSearchArray(generateRandom(searchSize));\r\n   }\r\n\r\n   function sorted() {\r\n      let copy = new Array(searchArray.length)\r\n      copy = Object.assign([], searchArray)\r\n      copy = copy.sort((a: number, b: number) => a - b)\r\n      return copy;\r\n   }\r\n\r\n   function generateRandom(size: number) {\r\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\r\n      const array = [];\r\n      for (let x = 0; x < size; x++) {\r\n         const random = Math.floor(Math.random() * (110 - 1 + 1) + 1)\r\n         array.push(random);\r\n      }\r\n      return array;\r\n   }\r\n\r\n\r\n\r\n   // ---> MARK UP\r\n   return (\r\n      <Box\r\n         p={4}\r\n         className=\"flat searchVisualizerContainer \"\r\n         style={{\r\n            width: '98vw', height: '80vh', position: 'relative',\r\n            margin: 'auto', top: '1rem', overflow: 'hidden',\r\n            borderRadius: '10px'\r\n         }}>\r\n         <Box\r\n            display=\"flex\"\r\n            className=\"searchItemInput rgba2 transparent\" >\r\n            <Box\r\n               margin=\"auto\"\r\n               flex={1}\r\n               className=\"transparent\">\r\n               <Box component=\"span\" mr={1}>Search for :</Box>\r\n               <TextField\r\n                  handleInput={(n: number) => {\r\n                     setsearchItem(n);\r\n                  }}\r\n                  type=\"number\"\r\n                  placeHolder=\"Any positive integer\" />\r\n            </Box>\r\n         </Box>\r\n         <Box\r\n            className=\"linearSearch rgba2\" >\r\n            <h3 className=\"searchLabel\" style={{ color: linearMessageColor }} > {linearSearchMessage} </h3>\r\n            <div>\r\n               {searchArray.map((each: number, idx: number) =>\r\n                  <div\r\n                     style={{ height: `${each}px` }}\r\n                     key={idx}\r\n                     className=\"linear-bar\" >\r\n                  </div>\r\n               )}\r\n            </div>\r\n         </Box>\r\n         <Box\r\n            className=\"binarySearch rgba2\" >\r\n            <h3 className=\"searchLabel\" style={{ color: binaryMessageColor }} > {binarySearchMessage} </h3>\r\n            <div>\r\n               {\r\n                  SortedsearchArray.current.map((each: number, idx: number) =>\r\n                     <div\r\n                        style={{ height: `${each}px` }}\r\n                        key={idx}\r\n                        className=\"binary-bar\">\r\n                     </div>\r\n                  )}\r\n            </div>\r\n         </Box>\r\n         <Box\r\n            className=\"searchingVisualizerPanel rgba2\" >\r\n            <div>\r\n               <Box\r\n                  ml={2} mr={2}>\r\n                  <Button label=\"New Array\" handleClick={() => {\r\n                     setSearchArray(generateRandom(searchSize))\r\n                     for (let x = 0; x < searchArray.length; x++) {\r\n                        changeColor('linear-bar', x, '#0AFFEF')\r\n                        changeColor('binary-bar', x, '#0AFFEF')\r\n                     }\r\n                     setLinearMessageColor(\"white\")\r\n                     setBinaryMessageColor(\"white\")\r\n                     set_binarySearchMessage(\"Binary Search\")\r\n                     set_linearSearchMessage(\"Linear Search\")\r\n                  }} />\r\n               </Box>\r\n               <Box\r\n                  ml={2} mr={2}\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\">\r\n                  <Box p={1} >Change Size</Box>\r\n                  <input\r\n                     id=\"searchArray-change-size-slider\"\r\n                     type=\"range\"\r\n                     onInput={(event: any) => { changeSize(event.target.value) }}\r\n                     value={searchSize}\r\n                     min={10}\r\n                     max={300} />\r\n               </Box>\r\n               <Box\r\n                  ml={2} mr={2}\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\">\r\n                  <Box p={1}>Change Speed</Box>\r\n                  <input\r\n                     id=\"searchArray-change-speed-slider\"\r\n                     type=\"range\"\r\n                     value={searchSpeed}\r\n                     onInput={(event: any) => { setSearchSpeed(event.target.value) }}\r\n                     min={10}\r\n                     max={200} />\r\n               </Box>\r\n               <Box\r\n                  ml={2} mr={2}>\r\n                  <ButtonAccent\r\n                     type=\"accent\"\r\n                     label=\"Search\"\r\n                     handleClick={searchNow} />\r\n               </Box>\r\n               <Box\r\n                  ml={2} mr={2}>\r\n                  <ButtonAccent\r\n                     type=\"error\"\r\n                     label=\"stop\"\r\n                     handleClick={() => {\r\n                        for (const each of timeouts) {\r\n                           clearTimeout(each);\r\n                        }\r\n                        if (!lfound) {\r\n                           set_linearSearchMessage(\"Search stopped.\")\r\n                           setLinearMessageColor('yellow')\r\n                        }\r\n                        if (!bfound) {\r\n                           set_binarySearchMessage(\"Search stopped.\")\r\n                           setBinaryMessageColor('yellow')\r\n                        }\r\n                     }} />\r\n               </Box>\r\n            </div>\r\n         </Box>\r\n      </Box>\r\n   )\r\n}\r\nexport default memo(SearchingVisualizer);","import { memo, useState, useContext, useEffect, useRef } from 'react';\r\nimport { mouseDownContext } from './PathFindingVisualizer';\r\n\r\nfunction NodeSquare(props: any) {\r\n    const mouseIsDown = useContext(mouseDownContext);\r\n    const [start, set_start] = useState(props.isStart);\r\n    const [finish, set_finish] = useState(props.isFinish);\r\n    const classname = start ? 'node start' : (finish ? 'node finish' : 'node');\r\n\r\n    let box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n\r\n    useEffect(() => {\r\n        box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n        props.clearPath();\r\n        props.onMouseEnter(mouseIsDown.s, props.id, true);\r\n    }, [finish]);\r\n\r\n    useEffect(() => {\r\n        box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n        props.clearPath();\r\n        props.onMouseEnter(props.id, mouseIsDown.f, true);\r\n    }, [start]);\r\n\r\n    // @@@@@@@@@@@@@@@@ functions @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2\r\n    function handleMouseDown(e: any) {\r\n        if (start || finish) return;\r\n        e.preventDefault();\r\n        box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n        let obs = box[props.id].classList.contains('obstacle');\r\n        if (e.ctrlKey) {\r\n            const weighted = box[props.id].classList.contains('weight');\r\n            if (weighted) box[props.id].classList.remove('weight');\r\n            else box[props.id].classList.add('weight');\r\n        }\r\n        else {\r\n            if (obs) box[props.id].classList.remove('obstacle');\r\n            else box[props.id].classList.add('obstacle');\r\n        }\r\n\r\n        props.clearPath();\r\n        props.onMouseEnter(mouseIsDown.s, mouseIsDown.f, true);\r\n        props.onMouseDown(true);\r\n    }\r\n\r\n    function handleMouseEnter(e: any) {\r\n        e.preventDefault();\r\n        if (start || finish) return;\r\n        if (mouseIsDown.MouseDown) {\r\n            box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n            let obs = box[props.id].classList.contains('obstacle');\r\n            if (e.ctrlKey) {\r\n                const weighted = box[props.id].classList.contains('weight');\r\n                if (weighted) box[props.id].classList.remove('weight');\r\n                else box[props.id].classList.add('weight');\r\n            }\r\n            else {\r\n                if (obs) box[props.id].classList.remove('obstacle');\r\n                else box[props.id].classList.add('obstacle');\r\n            }\r\n            props.clearPath();\r\n            props.onMouseEnter(mouseIsDown.s, mouseIsDown.f, true);\r\n        }\r\n    }\r\n    function handleMouseUp() {\r\n        props.onMouseDown(false);\r\n        if(mouseIsDown.prev === props.id) {\r\n            console.log(box[props.id]);\r\n            console.log(box[props.id + 1]);\r\n        }\r\n    }\r\n    function handleDragStart(e: any) {\r\n        box[props.id].setAttribute('draggable', 'false');\r\n        props.changePrev(props.id);\r\n    }\r\n    function handleOnDrop(e: any) {\r\n        e.preventDefault();\r\n        if (box[mouseIsDown.prev].classList[1] === 'start') {\r\n            box[props.id].classList.add('start');\r\n            box[mouseIsDown.prev].classList.remove('start');\r\n            props.changeStart(props.id);\r\n            set_start(true);\r\n        }\r\n        else if (box[mouseIsDown.prev].classList[1] === 'finish') {\r\n            box[props.id].classList.add('finish');\r\n            box[mouseIsDown.prev].classList.remove('finish');\r\n            props.changeFinish(props.id);\r\n            set_finish(true);\r\n        }\r\n        box[props.id].setAttribute('draggable', 'true');\r\n    }\r\n    function handleDragOver(e: any) {\r\n        e.preventDefault();\r\n    }\r\n    // @@@@@@@@@@@@@@@@@@@@ mark up @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    return (\r\n        <div\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleOnDrop}\r\n            onDragStart={handleDragStart}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseDown={handleMouseDown}\r\n            onMouseUp={handleMouseUp}\r\n            draggable={start || finish}\r\n            className={classname}\r\n            id={props.id}>\r\n        </div>\r\n    )\r\n}\r\nexport default memo(NodeSquare);","\r\nconst nodes = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n\r\nfunction resetNodes(){\r\n    for(let x = 0; x < (50*15); x++) {\r\n        nodes[x].setAttribute('data-distance', '1000');\r\n        nodes[x].setAttribute('data-parent', 'none');\r\n    }\r\n}\r\nfunction setDistance(index: number, distance: number) {\r\n    nodes[index].setAttribute('data-distance', distance.toString());\r\n}\r\nfunction getDistance(index: number): number {\r\n    const distance = nodes[index].getAttribute('data-distance');\r\n    if(distance) return parseInt(distance);\r\n    return 1000;\r\n}\r\nfunction isObstacle(index: number) {\r\n    return nodes[index].classList.contains('obstacle');\r\n}\r\nfunction isWeighted(index: number) {\r\n    return nodes[index].classList.contains('weight');\r\n}\r\nfunction getNeighbors(index: number) {\r\n    const up = index - 50;\r\n    const down = index + 50;\r\n    const right = index + 1;\r\n    const left = index - 1;\r\n    const neighbors = [] as any[];\r\n\r\n    if(up >= 51 && !isObstacle(up)) neighbors.push(nodes[up]);\r\n    if(down < (50 * 14) && !isObstacle(down)) neighbors.push(nodes[down]);\r\n    if(right < (50 * 14) && !isObstacle(right)) neighbors.push(nodes[right]);\r\n    if(left >= 51 && !isObstacle(left)) neighbors.push(nodes[left]);\r\n\r\n    return neighbors;\r\n}\r\nfunction setParent(index: number, parent: string) {\r\n    nodes[index].setAttribute('data-parent', parent);\r\n}\r\nfunction getParent(index: number) {\r\n    let parentIndex;\r\n\r\n    if(nodes[index]){\r\n        parentIndex = nodes[index].getAttribute('data-parent');\r\n    }\r\n    return parentIndex;\r\n}\r\n\r\nfunction backTrack(index: number) {\r\n    let frames = [] as any[];\r\n    let parentIndex = getParent(index);\r\n    while(parentIndex !== 'none') {\r\n        let x = 0;\r\n        if(parentIndex)\r\n            x = parseInt(parentIndex);\r\n        frames.push(x);\r\n        parentIndex = getParent(x);\r\n    }\r\n    return frames;\r\n}\r\n\r\n// ============================= ENTRY POINT ===============\r\nexport const dijkstra = (startIdx: number, goalIdx: number) => {\r\n    resetNodes();\r\n    setDistance(startIdx, 0);\r\n\r\n    let visited: any = {};\r\n    let queue = [nodes[startIdx]];\r\n    let frames = [] as number[];\r\n\r\n    while(queue.length > 0) {\r\n        let curNode = queue.shift();\r\n        if(curNode) {\r\n            const curID = parseInt(curNode.id);\r\n\r\n            let neighbors = getNeighbors(curID);\r\n\r\n            for (let x = 0; x < neighbors.length; x++) {\r\n\r\n                let curNode = neighbors[x];\r\n                let curNodeID = parseInt(curNode.id);\r\n\r\n                if(visited[curNodeID]) continue;\r\n\r\n                frames.push(curNodeID);\r\n\r\n                let curDistance = getDistance(curNodeID);\r\n                let add = isWeighted(curNodeID) ? 2:1;\r\n                let newDistance = getDistance(curID) + add;\r\n\r\n                if(newDistance < curDistance) {\r\n                    setDistance(curNodeID, newDistance);\r\n                    setParent(curNodeID, curID.toString());\r\n                }\r\n\r\n                if(curNodeID === goalIdx) {\r\n                    return [frames,\r\n                    backTrack(curNodeID)];\r\n                }\r\n\r\n                queue.push(curNode);\r\n                visited[curNodeID] = true;\r\n            }\r\n            visited[curID] = true;\r\n        }\r\n    }\r\n\r\n    return [frames, []];\r\n}\r\n","import {dijkstra} from './dijkstra';\r\n\r\nconst min = 0;\r\nconst max = (50 * 15) - 1;\r\nconst BFS = 0;\r\nconst DFS = 1;\r\nconst DIJKSTRA = 2;\r\n\r\nlet animationFrames = [] as any;\r\n\r\nexport class node {\r\n    data: number;\r\n    parent?: node;\r\n    constructor(value: number) {\r\n        this.data = value;\r\n        this.parent = undefined;\r\n    }\r\n}\r\nexport default function Algorithms(start: number, end: number, animationId: number) {\r\n\r\n    animationFrames = [];\r\n    let pathAnimation = [] as any;\r\n    let pathStart;\r\n    if (animationId === BFS) pathStart = bfs(start, end);\r\n    else if (animationId === DFS) pathStart = bfs(start, end, true);\r\n    else if (animationId === DIJKSTRA) {\r\n        let frames = dijkstra(start, end);\r\n        return frames;\r\n    }\r\n\r\n    pathStart = pathStart?.parent;\r\n\r\n    while (pathStart != undefined) {\r\n        pathAnimation.push(pathStart.data);\r\n        pathStart = pathStart.parent;\r\n    }\r\n    return [animationFrames, pathAnimation];\r\n}\r\n\r\n\r\nexport function bfs(start: number, end: number, depth?: boolean) {\r\n    let boxes = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n    let visited = new Set<number>();\r\n    visited.add(start);\r\n    let startNode = new node(start);\r\n    let queue = [] as node[];\r\n    queue.push(startNode);\r\n\r\n    while (queue.length > 0) {\r\n        let front;\r\n        if (depth) front = queue.pop();\r\n        else front = queue.shift();\r\n        if (front?.data === end) {\r\n            return front;\r\n        }\r\n        else if (front) {\r\n            const data = front.data;\r\n            const right = data + 1;\r\n            const down = data + 50;\r\n            const up = data - 50;\r\n            const left = data - 1;\r\n            if (left >= min && !visited.has(left) && !boxes[left].classList.contains('obstacle')) {\r\n                visited.add(left);\r\n                let newNode = new node(left);\r\n                newNode.parent = front;\r\n                queue.push(newNode);\r\n                animationFrames.push(left);\r\n            }\r\n            if (right < max && !visited.has(right) && !boxes[right].classList.contains('obstacle')) {\r\n                visited.add(right);\r\n                let newNode = new node(right);\r\n                newNode.parent = front;\r\n                queue.push(newNode);\r\n                animationFrames.push(right);\r\n            }\r\n            if (down < max && !visited.has(down) && !boxes[down].classList.contains('obstacle')) {\r\n                visited.add(down);\r\n                let newNode = new node(down);\r\n                newNode.parent = front;\r\n                queue.push(newNode);\r\n                animationFrames.push(down);\r\n            }\r\n            if (up >= min && !visited.has(up) && !boxes[up].classList.contains('obstacle')) {\r\n                visited.add(up);\r\n                let newNode = new node(up);\r\n                newNode.parent = front;\r\n                queue.push(newNode);\r\n                animationFrames.push(up);\r\n            }\r\n        }\r\n    }\r\n}","import React, { createContext, useEffect } from 'react';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport NodeSquare from './NodeSquare';\r\nimport { Box } from '@material-ui/core';\r\nimport Button from '../../buttons/Button';\r\nimport ButtonAccent from '../../buttons/ButtonAccent';\r\nimport { useState, useRef, useMemo } from 'react';\r\nimport Algorithms, { bfs, node } from './Algorithms';\r\n\r\nexport const mouseDownContext = createContext({} as any);\r\n\r\nfunction PathFindingVisualizer() {\r\n    let boxes = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\r\n    const [algoOptionsDropdown, set_algoOptionsDropdown] = useState(false);\r\n    const [activeAlgo, setActiveAlgo] = useState({ id: -1, name: 'Choose Algorithm' });\r\n    const [speed, setSpeed] = useState(93);\r\n\r\n    const algortihms = useRef([\r\n        { id: 0, name: 'Breadth First Search' },\r\n        { id: 1, name: 'Depth First Search' },\r\n        { id: 2, name: 'Dijkstra\\'s Algorithm'},\r\n    ])\r\n\r\n    useEffect(() => {\r\n        addBorderWalls();\r\n    }, []);\r\n\r\n    const [nodes, setNodes] = useState([] as any);\r\n    const [start, setStart] = useState(105);\r\n    const [finish, setFinish] = useState(645);\r\n    const [prevNode, setPrevNode] = useState(-1);\r\n\r\n    const [isMouseDown, set_isMouseDown] = useState(false);\r\n\r\n    useMemo(() => {\r\n        const hey = [] as any;\r\n        for (let x = 0; x < 50 * 15; x++) {\r\n            hey.push(<NodeSquare\r\n                clearPath={clearPath}\r\n                onMouseEnter={findThePath}\r\n                changeStart={handleChangeStart}\r\n                changeFinish={handleChangeFinish}\r\n                changePrev={(id: number) => { setPrevNode(id) }}\r\n                onMouseDown={(b: boolean) => { set_isMouseDown(b) }}\r\n                isStart={x === start}\r\n                isFinish={x === finish}\r\n                id={x}\r\n                key={x} />)\r\n        }\r\n        setNodes(hey);\r\n    }, [start, finish, activeAlgo]);\r\n\r\n    // FUNCTIONS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    function findThePath(s: number, en: number, instant?: boolean) {\r\n        if (instant) {\r\n            const frames = Algorithms(en, s, activeAlgo.id)[1];\r\n            for (let x = 0; x < frames.length; x++) {\r\n                if (frames[x] === finish) break;\r\n                if (boxes[frames[x]]) {\r\n                    boxes[frames[x]].classList.add('path');\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        clearPath();\r\n        clearVisited();\r\n        // this will accept two array\r\n        let animationFrames = Algorithms(en, s, activeAlgo.id);\r\n        animate(animationFrames[0], 'visited');\r\n        setTimeout(() => {\r\n            animatePath(animationFrames[1]);\r\n            setTimeout(() => {\r\n                clearVisited();\r\n            }, animationFrames[1].length * (120 - speed));\r\n        }, animationFrames[0].length * (100 - speed))\r\n    }\r\n\r\n    function animate(frames: number[], classname: string) {\r\n        for (let x = 0; x < frames.length; x++) {\r\n            if (frames[x] === start) continue;\r\n            changeColor(frames[x], x, classname);\r\n        }\r\n    }\r\n    function animatePath(frames: number[]) {\r\n        for (let x = 0; x < frames.length; x++) {\r\n            if (frames[x] === finish) continue;\r\n            changeColor(frames[x], x * 4, 'path');\r\n        }\r\n        if (boxes[frames[frames.length - 1]] === undefined) {\r\n            window.alert('There is no possible path.');\r\n        }\r\n    }\r\n\r\n    function changeColor(id: number, ms: number, classname: string) {\r\n        setTimeout(() => {\r\n            if (classname === 'path') {\r\n                boxes[id].classList.remove('visited');\r\n                boxes[id].classList.add(classname);\r\n            }\r\n            else if (boxes[id]) {\r\n                boxes[id].classList.add(classname);\r\n            }\r\n        }, ms * (100 - speed));\r\n    }\r\n    function addBorderWalls() {\r\n        for (let x = 0; x < 50; x++) {\r\n            if (boxes[x])\r\n                boxes[x].style.transition = \".1s ease-in\";\r\n            boxes[x].classList.add('obstacle');\r\n        }\r\n        for (let x = 50; x < (50 * 15); x += 50) {\r\n            if (boxes[x])\r\n                boxes[x].style.transition = \".1s ease-in\";\r\n            boxes[x].classList.add('obstacle');\r\n        }\r\n        for (let x = 99; x < (50 * 15); x += 50) {\r\n            if (boxes[x])\r\n                boxes[x].style.transition = \".1s ease-in\";\r\n            boxes[x].classList.add('obstacle');\r\n        }\r\n        for (let x = 50 * 14; x < (50 * 15); x++) {\r\n            if (boxes[x])\r\n                boxes[x].style.transition = \".1s ease-in\";\r\n            boxes[x].classList.add('obstacle');\r\n        }\r\n    }\r\n    function handleChangeStart(n: number) {\r\n        setStart(n);\r\n    }\r\n    function handleChangeFinish(n: number) {\r\n        setFinish(n);\r\n    }\r\n    const ShowAlgoOptionsDropdown = () => {\r\n        set_algoOptionsDropdown((prev: boolean) => !prev);\r\n    }\r\n    const selectAlgo = (id: number) => {\r\n        setActiveAlgo(algortihms.current[id]);\r\n        set_algoOptionsDropdown(false);\r\n    }\r\n    function changeSpeed(e: any) {\r\n        const value = e.target.value;\r\n        setSpeed(value);\r\n    }\r\n    function clearObstacles() {\r\n        let boxes = document.querySelectorAll('.obstacle');\r\n        for (let x = 0; x < boxes.length; x++) {\r\n            boxes[x].classList.remove('obstacle');\r\n        }\r\n    }\r\n    function clearPath() {\r\n        let boxes = document.querySelectorAll('.path');\r\n        for (let x = 0; x < boxes.length; x++) {\r\n            boxes[x].classList.remove('path');\r\n        }\r\n    }\r\n    function clearVisited() {\r\n        let boxes = document.querySelectorAll('.visited');\r\n        for (let x = 0; x < boxes.length; x++) {\r\n            boxes[x].classList.remove('visited');\r\n        }\r\n    }\r\n    function clearWeights() {\r\n        let boxes = document.querySelectorAll('.weight');\r\n        for (let x = 0; x < boxes.length; x++) {\r\n            boxes[x].classList.remove('weight');\r\n        }\r\n    }\r\n    function resetField() {\r\n        clearObstacles();\r\n        clearPath();\r\n        clearVisited();\r\n        clearWeights();\r\n        addBorderWalls();\r\n    }\r\n    function generateWalls() {\r\n        clearObstacles();\r\n        addBorderWalls();\r\n        clearPath();\r\n        for (let x = 0; x < 50 * 15; x++) {\r\n            if (boxes[x] && !(boxes[x].classList.contains('obstacle')) && !(boxes[x].classList.contains('finish')) && !(boxes[x].classList.contains('start'))) {\r\n                if (Math.floor(Math.random() * 50) < 14)\r\n                    boxes[x].classList.add('obstacle');\r\n            }\r\n        }\r\n    }\r\n    // OTHER VARIABLES @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    const algoOptions = algortihms.current.map((each: any) =>\r\n        <div key={each.id} onClick={() => {\r\n            (document.getElementsByClassName(\"pathfinding-algoOptions\") as HTMLCollectionOf<HTMLElement>)[0].style.border = \"none\"\r\n            selectAlgo(each.id);\r\n        }} > {each.name} </div>\r\n    )\r\n    \r\n    // function isObstacle(index: number) {\r\n    //     return (boxes[index] !== undefined && boxes[index].classList.contains('obstacle'));\r\n    // }\r\n    function makeObstacle(index: number) {\r\n        if(boxes[index] && !(boxes[index].classList.contains('finish')) && !(boxes[index].classList.contains('start'))) boxes[index].classList.add('obstacle');\r\n    }\r\n\r\n    function createMaze(start: number, length: number, height: number, first?: boolean) {\r\n        if(length < 2 || height < 3) return;\r\n        if (first) {\r\n            clearPath();\r\n            clearObstacles();\r\n            addBorderWalls();\r\n        }\r\n\r\n        let halfLen = Math.floor(length / 2);\r\n        let halfHeight = Math.floor(height / 2);\r\n\r\n        // horizontal mid node\r\n        let lmid = start + halfLen;\r\n        // vertical mid node\r\n        let hmid = start + (50 * halfHeight);\r\n\r\n        let randomX = Math.floor( Math.random() * halfHeight + 1);\r\n        for(let x = 0; x < halfHeight; x++) {\r\n            if(x === randomX || x === randomX - 1) continue;\r\n            makeObstacle(lmid + (50 * x));\r\n        }\r\n        let remainingY = (height - halfHeight);\r\n        randomX = Math.floor( Math.random() * remainingY );\r\n        for(let x = 0; x < remainingY; x++) {\r\n            if(x === randomX || x === randomX - 1) continue;\r\n            makeObstacle((lmid + (50*halfHeight) + (x*50)));\r\n        }\r\n\r\n        let randomY = Math.floor( Math.random() * halfLen + 1);\r\n\r\n        for(let x = 0; x < halfLen; x++) {\r\n            if(x === randomY || randomY - 1 === x || randomY + 1 === x) continue;\r\n            makeObstacle(hmid + x);\r\n        }\r\n        let remainingX = length - halfLen;\r\n        randomY = Math.floor( Math.random() * remainingX );\r\n        for(let x = 0; x < remainingX; x++) {\r\n            if(x === randomY || randomY - 1 === x || randomY + 1 === x) continue;\r\n            makeObstacle(hmid + x + halfLen);\r\n        }\r\n\r\n        createMaze(start, halfLen, halfHeight);\r\n        createMaze(start + halfLen - 1, remainingX, halfHeight);\r\n        createMaze(hmid + 100, halfLen, remainingY);\r\n        createMaze(hmid + 100 + halfLen, remainingX, remainingY);\r\n    }\r\n\r\n\r\n    // MARK UP @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    return (\r\n        <Box\r\n            p={4}\r\n            className=\"flat\"\r\n            style={{\r\n                width: '98vw', height: '80vh', position: 'relative',\r\n                margin: 'auto', top: '1rem', overflow: 'hidden',\r\n                borderRadius: '10px'\r\n            }}>\r\n\r\n            <div className={\"pathfinding-algoOptions\"}>\r\n                <div className=\"pathfinding-algo-dropdown\" onClick={ShowAlgoOptionsDropdown}>\r\n                    <div> {activeAlgo.name} </div>\r\n                    <ArrowDropDownIcon />\r\n                </div>\r\n\r\n                <Box hidden={!algoOptionsDropdown}>\r\n                    <div className=\"pathAlgo-options\">\r\n                        {algoOptions}\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n\r\n            <div className=\"search-field\">\r\n                <mouseDownContext.Provider value={{ MouseDown: isMouseDown, prev: prevNode, s: start, f: finish }}>\r\n                    <div id=\"draggable-field\" >\r\n                        {nodes}\r\n                    </div>\r\n                </mouseDownContext.Provider>\r\n            </div>\r\n\r\n            <div className=\"pathFinding-panel\">\r\n                <div>\r\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                        <Box m={1}>Change Speed</Box>\r\n                        <input aria-label=\"pathfinding-speed\" type=\"range\" min={0.1} max={98} value={speed} onChange={changeSpeed} />\r\n                    </Box>\r\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                        <Button label=\"Reset Field\" handleClick={resetField} />\r\n                    </Box>\r\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                        <Button label=\"Random Walls\" handleClick={generateWalls} />\r\n                    </Box>\r\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                        <Button label=\"Create Maze\" handleClick={() => { createMaze(51, 48, 13, true); }} />\r\n                    </Box>\r\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                        <ButtonAccent handleClick={() => {\r\n                            if (activeAlgo.id === -1) {\r\n                                (document.getElementsByClassName(\"pathfinding-algoOptions\") as HTMLCollectionOf<HTMLElement>)[0].style.border = \"2px solid red\"\r\n                                return;\r\n                            }\r\n                            (document.getElementsByClassName(\"pathfinding-algoOptions\") as HTMLCollectionOf<HTMLElement>)[0].style.border = \"none\"\r\n                            findThePath(start, finish, false);\r\n                        }} type=\"error\" label=\"Find the path!\" />\r\n                    </Box>\r\n                </div>\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default React.memo(PathFindingVisualizer);","import { useState } from 'react';\r\nimport {Box } from '@material-ui/core';\r\nimport AppBar from './components/AppBar';\r\n\r\nimport SortingVisualizer from './components/visualizers/SortingVisualizer';\r\nimport SearchingVisualizer from './components/visualizers/searching/SearchingVisualizer';\r\nimport PathFindingVisualizer from './components/visualizers/pathFinding/PathFindingVisualizer';\r\n\r\nimport './sass/main.css';\r\n\r\nfunction App() {\r\n\r\n   const [currentOpenTab, set_currentOpenTab] = useState(0);\r\n\r\n   function changeTab(n: number) {\r\n      set_currentOpenTab(n);\r\n   }\r\n\r\n   return (\r\n      <Box>\r\n         <AppBar handleChangeTab={changeTab} />\r\n\r\n         <Box\r\n            hidden={currentOpenTab !== 0}\r\n            mt={3}\r\n            className=\"f-color1\" >\r\n\r\n            <SortingVisualizer />\r\n         </Box>\r\n         <Box\r\n            hidden={currentOpenTab !== 1}\r\n            mt={3}\r\n            className=\"f-color1\" >\r\n\r\n            <SearchingVisualizer />\r\n         </Box>\r\n         <Box\r\n            hidden={currentOpenTab !== 2}\r\n            mt={3}\r\n            className=\"f-color1\" >\r\n\r\n            <PathFindingVisualizer />\r\n         </Box>\r\n      </Box>\r\n   );\r\n}\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}