[{"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\index.tsx":"1","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\reportWebVitals.ts":"2","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\App.tsx":"3","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\IconButton.tsx":"4","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\Button.tsx":"5","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonAccent.tsx":"6","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonText.tsx":"7","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonWithIcon.tsx":"8","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\RoundButton.tsx":"9","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ToggleButton.tsx":"10","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\slider.tsx":"11","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\TextField.tsx":"12","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Radio.tsx":"13","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\CheckBox.tsx":"14","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\AppBar.tsx":"15","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\SideMenu.tsx":"16","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Select.tsx":"17","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\SortingVisualizer.tsx":"18","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\SelectionSort.ts":"19","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\InsertionSort.ts":"20","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\ShellSort.ts":"21","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\HeapSort.ts":"22","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\MergeSort.tsx":"23","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\QuickSort.tsx":"24","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\template.functions.ts":"25","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\searching\\SearchingVisualizer.tsx":"26","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\searching\\searchingAlgorithms.tsx":"27"},{"size":500,"mtime":1609945724099,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1610765671597,"results":"30","hashOfConfig":"29"},{"size":899,"mtime":1610765453968,"results":"31","hashOfConfig":"29"},{"size":591,"mtime":1610457826961,"results":"32","hashOfConfig":"29"},{"size":488,"mtime":1610461804580,"results":"33","hashOfConfig":"29"},{"size":643,"mtime":1610287994384,"results":"34","hashOfConfig":"29"},{"size":514,"mtime":1610210486694,"results":"35","hashOfConfig":"29"},{"size":753,"mtime":1609990031088,"results":"36","hashOfConfig":"29"},{"size":707,"mtime":1610210504379,"results":"37","hashOfConfig":"29"},{"size":771,"mtime":1610335730700,"results":"38","hashOfConfig":"29"},{"size":1190,"mtime":1610464267248,"results":"39","hashOfConfig":"29"},{"size":577,"mtime":1610629723917,"results":"40","hashOfConfig":"29"},{"size":821,"mtime":1610069187010,"results":"41","hashOfConfig":"29"},{"size":1114,"mtime":1610083818057,"results":"42","hashOfConfig":"29"},{"size":1913,"mtime":1610765444706,"results":"43","hashOfConfig":"29"},{"size":385,"mtime":1610098705525,"results":"44","hashOfConfig":"29"},{"size":2141,"mtime":1610119976807,"results":"45","hashOfConfig":"29"},{"size":8144,"mtime":1610766042669,"results":"46","hashOfConfig":"29"},{"size":4474,"mtime":1610508283473,"results":"47","hashOfConfig":"29"},{"size":3789,"mtime":1610508209529,"results":"48","hashOfConfig":"29"},{"size":3072,"mtime":1610508170896,"results":"49","hashOfConfig":"29"},{"size":4982,"mtime":1610508117727,"results":"50","hashOfConfig":"29"},{"size":4388,"mtime":1610722127372,"results":"51","hashOfConfig":"29"},{"size":7045,"mtime":1610508001534,"results":"52","hashOfConfig":"29"},{"size":631,"mtime":1610545223898,"results":"53","hashOfConfig":"29"},{"size":9797,"mtime":1610675863488,"results":"54","hashOfConfig":"29"},{"size":3827,"mtime":1610765959414,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"ppngcm",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\index.tsx",[],["121","122"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\reportWebVitals.ts",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\App.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\IconButton.tsx",[],["123","124"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\Button.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonAccent.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonText.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonWithIcon.tsx",["125"],"import {useState} from 'react';\r\nimport {Box} from '@material-ui/core/';\r\n\r\nexport default function ButtonWithIcon(props: any)\r\n{\r\n    const [disabled, set_disabled] = useState(props.disable);\r\n\r\n    return (\r\n        <button \r\n            title={props.title} \r\n            className={\"oval flat btn\"} \r\n            onClick={props.handleClick}\r\n            id={props.id}\r\n            style={{opacity: disabled ? '.4' : '1', \r\n                    pointerEvents: disabled ? 'none':'visible',\r\n                    padding: '.5rem 1.5rem'}}\r\n            >\r\n                <Box display=\"flex\">\r\n                    {props.label}\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <props.icon />\r\n                </Box>\r\n        </button>\r\n    )\r\n}",["126","127"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\RoundButton.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ToggleButton.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\slider.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\TextField.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Radio.tsx",["128"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\CheckBox.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\AppBar.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\SideMenu.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Select.tsx",[],["129","130"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\SortingVisualizer.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\SelectionSort.ts",["131"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function SelectionSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums)\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // act ual algo\r\n    let size = mainArray.length\r\n    var i: number, j: number, min_idx: number;\r\n\r\n    for (i = 0; i < size - 1; i++)\r\n    {\r\n        min_idx = i;\r\n\r\n        for (j = i + 1; j < size; j++) {\r\n            \r\n            animations.push([CHANGE, j, min_idx])\r\n            animations.push([REVERT, j, min_idx])\r\n            if (descending) {\r\n                if (mainArray[j] > mainArray[min_idx]) min_idx = j;\r\n            }\r\n            else {\r\n                if (mainArray[j] < mainArray[min_idx]) min_idx = j;\r\n            }\r\n        }\r\n        animations.push([SWAP_CHANGE, i, min_idx])\r\n        animations.push([SWAP_REVERT, i, min_idx])\r\n\r\n        const temp = mainArray[min_idx]\r\n        mainArray[min_idx] = mainArray[i]\r\n        mainArray[i] = temp;\r\n    }\r\n    // animations start\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)    \r\n}\r\n\r\nexport function BubbleSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums)\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // act ual algo\r\n    let size = mainArray.length\r\n\r\n    for (let i = 0; i < size - 1; i++)\r\n    {\r\n        for (let j = i + 1; j < size; j++) {\r\n\r\n            animations.push([CHANGE, i, j])\r\n            animations.push([REVERT, i, j])\r\n\r\n            if (!descending) {\r\n                if (mainArray[i] > mainArray[j]) {\r\n                    animations.push([SWAP_CHANGE, i, j])        \r\n                    animations.push([SWAP_REVERT, i, j])  \r\n                    const temp = mainArray[i]      \r\n                    mainArray[i] = mainArray[j]\r\n                    mainArray[j] = temp;\r\n                }\r\n            }\r\n            else {\r\n                if (mainArray[i] < mainArray[j]) {\r\n                    animations.push([SWAP_CHANGE, i, j])        \r\n                    animations.push([SWAP_REVERT, i, j])   \r\n                    const temp = mainArray[i]     \r\n                    mainArray[i] = mainArray[j]\r\n                    mainArray[j] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // animations start\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)    \r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\InsertionSort.ts",["132"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function InsertionSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean) \r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums )\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // actual algo\r\n    let size = mainArray.length;\r\n    for (let x = 1; x < size; x++)\r\n    {\r\n        animations.push([CHANGE, x, x-1])\r\n        animations.push([REVERT, x, x-1])\r\n\r\n        if (!descending) {\r\n            if (mainArray[x - 1] > mainArray[x])\r\n            {\r\n                for (let y = x; y > 0; y--)\r\n                {\r\n                    animations.push([CHANGE, y, y-1])\r\n                    animations.push([REVERT, y, y-1])\r\n\r\n                    if (mainArray[y] < mainArray[y - 1]) {\r\n\r\n                        animations.push([SWAP_CHANGE, y, y-1])\r\n                        animations.push([SWAP_REVERT, y, y-1])\r\n\r\n                        const temp = mainArray[y];\r\n                        mainArray[y] = mainArray[y - 1]\r\n                        mainArray[y - 1] = temp\r\n                    }\r\n                }\r\n            }            \r\n        }\r\n        else {\r\n            if (mainArray[x - 1] < mainArray[x])\r\n            {\r\n                for (let y = x; y > 0; y--)\r\n                {\r\n                    animations.push([CHANGE, y, y-1])\r\n                    animations.push([REVERT, y, y-1])\r\n\r\n                    if (mainArray[y] > mainArray[y - 1]) {\r\n\r\n                        animations.push([SWAP_CHANGE, y, y-1])\r\n                        animations.push([SWAP_REVERT, y, y-1])\r\n\r\n                        const temp = mainArray[y];\r\n                        mainArray[y] = mainArray[y - 1]\r\n                        mainArray[y - 1] = temp\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)\r\n}\r\n    ","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\ShellSort.ts",["133"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function ShellSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean )\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums )\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // actual algo\r\n    let gap = Math.floor(mainArray.length / 2);\r\n    while ( gap >= 1) {\r\n        for (let j = gap; j < mainArray.length; j++) {\r\n            for (let i = j - gap; i >= 0; i -= gap) {\r\n\r\n                animations.push([CHANGE, i+gap, i])\r\n                animations.push([REVERT, i+gap, i])\r\n\r\n                if (!descending) {\r\n                    if (mainArray[i + gap] > mainArray[i]) break;    \r\n                }else\r\n                    if (mainArray[i + gap] < mainArray[i]) break;    \r\n                \r\n                animations.push([SWAP_CHANGE, i+gap, i])\r\n                animations.push([SWAP_REVERT, i+gap, i])\r\n\r\n                const temp = mainArray[i + gap]\r\n                mainArray[i + gap] = mainArray[i]\r\n                mainArray[i] = temp;\r\n            }\r\n        }\r\n        gap = Math.floor(gap / 2)\r\n    }\r\n\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length);\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\HeapSort.ts",["134"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet mainArray = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\nlet isDescending = false;\r\n\r\n// ======================================= constants Variables\r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// ======================================= ENTRY POINT\r\nexport default function HeapSort(\r\n    numbers: number[],\r\n    animation_speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean\r\n)\r\n{\r\n    ANIMATION_SPEED = 200 - animation_speed;\r\n    isDescending = descending;\r\n    mainArray = Object.assign([], numbers);\r\n    animations = [];\r\n    // actual call of heapsort algorithm\r\n    sort();\r\n    if (returnFrames) return animations;\r\n    // animate\r\n    animate();\r\n    callback(animations.length)\r\n}\r\n\r\n// ======================================== animation \r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ======================================== Sort\r\nfunction sort() {\r\n    let halfSize = mainArray.length / 2;\r\n    halfSize = Math.floor(halfSize);\r\n    \r\n    for (let x = halfSize; x >= 0; x--) {\r\n        heapify(mainArray.length, x);\r\n    }\r\n    for (let x = mainArray.length - 1; x > 0; x--)\r\n    {\r\n        animations.push([SWAP_CHANGE, x, 0])\r\n        animations.push([SWAP_REVERT, x, 0])\r\n        const temp = mainArray[0];\r\n        mainArray[0] = mainArray[x]\r\n        mainArray[x] = temp;\r\n        heapify(x, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(size: number, root: number) {\r\n    if (root >= size)\r\n        return;\r\n\r\n    let left = (2 * root) + 1;\r\n    let right = (2 * root) + 2;\r\n\r\n    if (left < size) {\r\n        // comparision\r\n        animations.push([CHANGE, left, root])\r\n        animations.push([REVERT, left, root])\r\n\r\n        if (!isDescending) {\r\n            if (mainArray[left] > mainArray[root]) {    \r\n\r\n                animations.push([SWAP_CHANGE, left, root])\r\n                animations.push([SWAP_REVERT, left, root])\r\n\r\n                const temp = mainArray[left];\r\n                mainArray[left] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }    \r\n        }\r\n        else {\r\n            if (mainArray[left] < mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, left, root])\r\n                animations.push([SWAP_REVERT, left, root])\r\n               \r\n                const temp = mainArray[left];\r\n                mainArray[left] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n            \r\n    }\r\n    if (right < size) {\r\n        // comparision\r\n        animations.push([CHANGE, right, root])\r\n        animations.push([REVERT, right, root])\r\n        if (!isDescending) {\r\n          \r\n            if (mainArray[right] > mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, right, root])\r\n                animations.push([SWAP_REVERT, right, root])\r\n               \r\n                const temp = mainArray[right];\r\n                mainArray[right] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n        else {\r\n            if (mainArray[right] < mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, right, root])\r\n                animations.push([SWAP_REVERT, right, root])\r\n                \r\n                const temp = mainArray[right];\r\n                mainArray[right] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n    }\r\n    heapify(size, left);\r\n    heapify(size, right);\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\MergeSort.tsx",["135","136"],"import { changeColor, changeHeight, PURPLE, ACC } from './template.functions';\r\nlet arr = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\nlet descend = false;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n// The function below is where the animation happens\r\n// the sequence divided for every triplet\r\n// the first of the triplet is when the values are being compared thus changing its color\r\n// the second of the tripled is when the values compared and revert its original color\r\n// you can better notice that in smaller array\r\n// finally, the third of the triplet is where the changing the height of a bar\r\n\r\n// ======================== ANIMATE =======================\r\nfunction animate() {\r\n   for (let x = 0; x < animations.length; x++) {\r\n      // change the color if the current iteration is not the third of the triplet\r\n      // example 1: if x = 0 then x % 3 = 0 and not 2 then change the color.\r\n      // example 2: if x = 1 then x % 3 = 0 and not 2 then revert the original color.\r\n      // example 3: if x = 2 then x % 3 = 2 then change the size;\r\n      const isColorChange = x % 3 !== 2;\r\n      if (isColorChange) {\r\n         const color = x % 3 === 0 ? PURPLE : ACC;\r\n         setTimeout(() => {\r\n            changeColor(animations[x][0], color);\r\n            changeColor(animations[x][1], color);\r\n\r\n         }, x * ANIMATION_SPEED);\r\n      }\r\n      // else change the height\r\n      else {\r\n         setTimeout(() => {\r\n            changeHeight(animations[x][0], animations[x][1]);\r\n         }, (x) * (ANIMATION_SPEED));\r\n      }\r\n   }\r\n}\r\n// ======================== entry point =======================\r\nexport default function MergeSort(nums: number[], speed: number, descending: boolean, callback: Function, returnFrames?: boolean) {\r\n   ANIMATION_SPEED = 200 - speed;\r\n   descend = descending;\r\n   animations = [];\r\n   arr = Object.assign([], nums);\r\n   // call the actual merge Sort to push all the animations\r\n   divide(0, arr.length - 1);\r\n\r\n   if (returnFrames) return animations;\r\n\r\n   // actual animation\r\n   animate();\r\n   callback(animations.length)\r\n}\r\n\r\n// ====================== MERGE SORT DIVIDE ============================\r\nfunction divide(left: number, right: number) {\r\n   if (left >= right)\r\n      return;\r\n   const mid = Math.floor((right + left) / 2)\r\n   // left half\r\n   divide(left, mid)\r\n   // right helf\r\n   divide(mid + 1, right)\r\n   // merge left and right\r\n   merge(left, mid, right);\r\n}\r\n// ====================== MERGE SORT COMBINE ============================\r\nfunction merge(left: number, mid: number, right: number) {\r\n   const leftsize = mid - left + 1;\r\n   const rightsize = right - mid;\r\n   const leftsub = arr.slice(left, mid + 1);\r\n   const rightsub = arr.slice(mid + 1);\r\n   let i = 0;\r\n   let j = 0;\r\n   let k = left;\r\n   while (i < leftsize && j < rightsize) {\r\n      // push two animations for color changes\r\n      animations.push([k, (left + leftsize) + j]);\r\n      // push the second time to revert the color\r\n      animations.push([k, (left + leftsize) + j]);\r\n      if (descend) {\r\n         if (leftsub[i] > rightsub[j]) {\r\n            // push the Height changes\r\n            animations.push([k, leftsub[i]]);\r\n            arr[k] = leftsub[i];\r\n            i++; k++;\r\n         }\r\n         else {\r\n            // push the Height changes\r\n            animations.push([k, rightsub[j]]);\r\n            arr[k] = rightsub[j];\r\n            j++; k++;\r\n         }\r\n         continue;\r\n      }\r\n      if (leftsub[i] < rightsub[j]) {\r\n         // push the Height changes\r\n         animations.push([k, leftsub[i]]);\r\n         arr[k] = leftsub[i];\r\n         i++; k++;\r\n      }\r\n      else {\r\n         // push the Height changes\r\n         animations.push([k, rightsub[j]]);\r\n         arr[k] = rightsub[j];\r\n         j++; k++;\r\n      }\r\n   }\r\n   while (i < leftsize) {\r\n      // here we should push a TRIPLET to maintain the ratio of the animatino sequence\r\n      animations.push([left + i, left + i]);\r\n      animations.push([left + i, left + i]);\r\n      animations.push([k, leftsub[i]]);\r\n\r\n      arr[k] = leftsub[i];\r\n      i++;\r\n      k++;\r\n   }\r\n\r\n   while (j < rightsize) {\r\n      animations.push([right + j, right + j]);\r\n      animations.push([right + j, right + j]);\r\n      animations.push([k, rightsub[j]]);\r\n\r\n      arr[k] = rightsub[j];\r\n      j++;\r\n      k++;\r\n   }\r\n}\r\n","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\QuickSort.tsx",["137"],"// `\r\n// ANIMATION STRATEGY: \r\n//     Each iteraton in animations array is also an array\r\n//     that has 3 elements. \r\n// Examples:\r\n//      [CHANGE, index, pivot],\r\n//      [REVERT, index, pivot],\r\n//      [SWAP_CHANGE, index1, index2],\r\n//      [SWAP_REVERT, index1, index2]\r\n// Basically, this means that if we found a CHANGE,\r\n// we will change the color of the bars[index],\r\n// if we found a REVERT then change its color back to normal,\r\n// if SWAP_CHANGE, change their colors and swap. \r\n// That means that the height of bars[inde1] will be the \r\n// height of bars[index2] and vice versa.\r\n// Finally, if we found SWAP_REVERT we will just simply \r\n// change the color back to normal\r\n// `\r\n\r\nimport {\r\n    changeColor,\r\n    changeHeight,\r\n    PURPLE,\r\n    RED,\r\n    GREEN,\r\n    ACC\r\n} from './template.functions';\r\n\r\n//  ======================================== DEPENDENT  VARIABLES <<<\r\nlet mainArray = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\nlet isDescending = false;\r\n\r\n// ========================================= INDEPENDENT VARIABLES\r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// ==================================================== ANIMATION animate()\r\nfunction animate() {\r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n// ===================================================== PARTITION DESCENDING\r\nfunction partition_descending(left: number, right: number, PIVOT: number) {    \r\n    while (left <= right) {\r\n        // here we will push the animation comparision\r\n        // example: animation.comparision.push([left, right])\r\n        // because we are comparing left and right\r\n        while (mainArray[left] > PIVOT){\r\n            animations.push([\r\n                CHANGE,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            left++;\r\n        }\r\n        while (mainArray[right] < PIVOT){\r\n            animations.push([\r\n                CHANGE,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            right--; \r\n        }\r\n        if (left <= right) {\r\n            animations.push([\r\n                SWAP_CHANGE,\r\n                left,\r\n                right\r\n            ])\r\n            animations.push([\r\n                SWAP_REVERT,\r\n                left,\r\n                right\r\n            ])\r\n            // here I'm swapping left and aright\r\n            let temporary = mainArray[left];\r\n            mainArray[left] = mainArray[right];\r\n            mainArray[right] = temporary;\r\n\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\n// ===================================================== PARTITION ASCENDING\r\nfunction partition_ascending(left: number, right: number, PIVOT: number) {    \r\n    while (left <= right) {\r\n        // here we will push the animation comparision\r\n        // example: animations.comparision.push([left, right])\r\n        // because we are comparing left and right\r\n        while (mainArray[left] < PIVOT) {\r\n            animations.push([\r\n                CHANGE,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            left++;\r\n        }\r\n            \r\n        while (mainArray[right] > PIVOT) {\r\n            animations.push([\r\n                CHANGE,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            right--; \r\n        }\r\n               \r\n        if (left <= right) {\r\n            animations.push([\r\n                SWAP_CHANGE,\r\n                left,\r\n                right\r\n            ])\r\n            animations.push([\r\n                SWAP_REVERT,\r\n                left,\r\n                right\r\n            ])\r\n            // here I'm swapping left and aright\r\n            let temporary = mainArray[left];\r\n            mainArray[left] = mainArray[right];\r\n            mainArray[right] = temporary;\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\n// ===================================================== SORT\r\nfunction sort(left: number, right: number) {\r\n    if (left >= right)\r\n        return;\r\n    // here I choose the middle element as a PIVOT\r\n    let midIndex = (left + right) / 2;\r\n    // console.log(midIndex);\r\n    // make sure to always floor the mid to avoid infinite loop\r\n    midIndex = Math.floor(midIndex);\r\n    let PIVOT = mainArray[midIndex];\r\n    // here, partition should return the index of the pivot \r\n    // or the element that is already in correct position\r\n    let DIVIDING_POINT: number;\r\n    if(isDescending)\r\n        DIVIDING_POINT = partition_descending(left, right, PIVOT);\r\n    else\r\n        DIVIDING_POINT = partition_ascending(left, right, PIVOT);\r\n    sort(left, DIVIDING_POINT - 1);\r\n    sort(DIVIDING_POINT, right);\r\n}\r\n\r\n// ================================================== ENTRY POINT\r\nexport default function QuickSort(\r\n    numbers: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    ANIMATION_SPEED = 200 - speed;\r\n    isDescending = descending;  \r\n    mainArray = Object.assign([], numbers);\r\n    // always clear the animations \r\n    animations = [];\r\n    // ACTUAL QUICK SORT CALL\r\n\r\n    sort(0, mainArray.length - 1);\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length);\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\template.functions.ts",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\searching\\SearchingVisualizer.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\searching\\searchingAlgorithms.tsx",["138","139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":6,"column":22,"nodeType":"148","messageId":"149","endLine":6,"endColumn":34},{"ruleId":"140","replacedBy":"150"},{"ruleId":"142","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":21,"column":61,"nodeType":"154","messageId":"155","endLine":21,"endColumn":63},{"ruleId":"140","replacedBy":"156"},{"ruleId":"142","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":43,"column":24,"nodeType":"160","messageId":"161","endLine":48,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":43,"column":24,"nodeType":"160","messageId":"161","endLine":48,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":43,"column":24,"nodeType":"160","messageId":"161","endLine":48,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":65,"column":24,"nodeType":"160","messageId":"161","endLine":70,"endColumn":14},{"ruleId":"158","severity":1,"message":"162","line":25,"column":21,"nodeType":"160","messageId":"161","endLine":29,"endColumn":11},{"ruleId":"158","severity":1,"message":"162","line":33,"column":21,"nodeType":"160","messageId":"161","endLine":35,"endColumn":11},{"ruleId":"158","severity":1,"message":"159","line":64,"column":24,"nodeType":"160","messageId":"161","endLine":69,"endColumn":14},{"ruleId":"152","severity":1,"message":"153","line":35,"column":20,"nodeType":"154","messageId":"155","endLine":35,"endColumn":22},{"ruleId":"152","severity":1,"message":"153","line":97,"column":19,"nodeType":"154","messageId":"155","endLine":97,"endColumn":21},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],"@typescript-eslint/no-unused-vars","'set_disabled' is assigned a value but never used.","Identifier","unusedVar",["163"],["164"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["163"],["164"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'mainArray', 'mainArray'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'animations', 'animations'.","no-global-assign","no-unsafe-negation"]