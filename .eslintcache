[{"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\index.tsx":"1","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\reportWebVitals.ts":"2","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\App.tsx":"3","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\IconButton.tsx":"4","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\Button.tsx":"5","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonAccent.tsx":"6","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonText.tsx":"7","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonWithIcon.tsx":"8","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\RoundButton.tsx":"9","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ToggleButton.tsx":"10","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\slider.tsx":"11","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\TextField.tsx":"12","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Radio.tsx":"13","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\CheckBox.tsx":"14","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\AppBar.tsx":"15","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\SideMenu.tsx":"16","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\SortingVisualizer.tsx":"17","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Select.tsx":"18","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\MergeSort.tsx":"19","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\QuickSort.tsx":"20","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\template.functions.ts":"21","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\HeapSort.ts":"22","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\ShellSort.ts":"23","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\InsertionSort.ts":"24","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\SelectionSort.ts":"25"},{"size":500,"mtime":1609945724099,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":1030,"mtime":1610521237009,"results":"29","hashOfConfig":"27"},{"size":591,"mtime":1610457826961,"results":"30","hashOfConfig":"27"},{"size":488,"mtime":1610461804580,"results":"31","hashOfConfig":"27"},{"size":643,"mtime":1610287994384,"results":"32","hashOfConfig":"27"},{"size":514,"mtime":1610210486694,"results":"33","hashOfConfig":"27"},{"size":753,"mtime":1609990031088,"results":"34","hashOfConfig":"27"},{"size":707,"mtime":1610210504379,"results":"35","hashOfConfig":"27"},{"size":771,"mtime":1610335730700,"results":"36","hashOfConfig":"27"},{"size":1190,"mtime":1610464267248,"results":"37","hashOfConfig":"27"},{"size":461,"mtime":1610020687830,"results":"38","hashOfConfig":"27"},{"size":821,"mtime":1610069187010,"results":"39","hashOfConfig":"27"},{"size":1114,"mtime":1610083818057,"results":"40","hashOfConfig":"27"},{"size":2588,"mtime":1610210424373,"results":"41","hashOfConfig":"27"},{"size":385,"mtime":1610098705525,"results":"42","hashOfConfig":"27"},{"size":8621,"mtime":1610521258578,"results":"43","hashOfConfig":"27"},{"size":2141,"mtime":1610119976807,"results":"44","hashOfConfig":"27"},{"size":4663,"mtime":1610544241064,"results":"45","hashOfConfig":"27"},{"size":7045,"mtime":1610508001534,"results":"46","hashOfConfig":"27"},{"size":631,"mtime":1610425141465,"results":"47","hashOfConfig":"27"},{"size":4982,"mtime":1610508117727,"results":"48","hashOfConfig":"27"},{"size":3072,"mtime":1610508170896,"results":"49","hashOfConfig":"27"},{"size":3789,"mtime":1610508209529,"results":"50","hashOfConfig":"27"},{"size":4474,"mtime":1610508283473,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"ppngcm",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"54"},"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\index.tsx",[],["115","116"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\reportWebVitals.ts",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\App.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\IconButton.tsx",[],["117","118"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\Button.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonAccent.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonText.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ButtonWithIcon.tsx",["119"],"import {useState} from 'react';\r\nimport {Box} from '@material-ui/core/';\r\n\r\nexport default function ButtonWithIcon(props: any)\r\n{\r\n    const [disabled, set_disabled] = useState(props.disable);\r\n\r\n    return (\r\n        <button \r\n            title={props.title} \r\n            className={\"oval flat btn\"} \r\n            onClick={props.handleClick}\r\n            id={props.id}\r\n            style={{opacity: disabled ? '.4' : '1', \r\n                    pointerEvents: disabled ? 'none':'visible',\r\n                    padding: '.5rem 1.5rem'}}\r\n            >\r\n                <Box display=\"flex\">\r\n                    {props.label}\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <props.icon />\r\n                </Box>\r\n        </button>\r\n    )\r\n}",["120","121"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\RoundButton.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\buttons\\ToggleButton.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\slider.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\TextField.tsx",["122"],"import {useState} from 'react';\r\n\r\nexport default function TextInput (props: any)\r\n{\r\n\r\n    return (\r\n        <input \r\n            type={props.type}\r\n            className={\"thin-inset textInput\"}\r\n            placeholder={props.placeHolder}\r\n            autoFocus={props.autofocus}\r\n            id={props.id}\r\n            style={{color: props.error ? '#FF555D' : 'white',\r\n                    width: props.fullWidth ? '100%': 'auto'}}\r\n            />\r\n    )\r\n}",["123","124"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Radio.tsx",["125"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\CheckBox.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\AppBar.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\SideMenu.tsx",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\SortingVisualizer.tsx",["126","127","128","129","130"],"import {useState} from 'react';\r\nimport {Box} from '@material-ui/core';\r\nimport Button from '../../components/buttons/Button';\r\nimport ButtonAccent from '../../components/buttons/ButtonAccent';\r\nimport ButtonText from '../../components/buttons/ButtonText';\r\nimport ToggleButton from '../../components/buttons/ToggleButton';\r\nimport Slider from '../../components/inputs/slider';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\n// Algorithms\r\nimport MergeSort from './sortingAlgorithms/MergeSort';\r\nimport QuickSort from './sortingAlgorithms/QuickSort';\r\nimport HeapSort from './sortingAlgorithms/HeapSort';\r\nimport ShellSort from './sortingAlgorithms/ShellSort';\r\nimport InsertionSort from './sortingAlgorithms/InsertionSort';\r\nimport SelectionSort from './sortingAlgorithms/SelectionSort';\r\nimport {BubbleSort} from './sortingAlgorithms/SelectionSort';\r\n\r\n// this indicates that the page loads for the first time\r\nlet first = true;\r\n\r\nexport default function SortingVisualizer (props: any): JSX.Element {\r\n\r\n    const [algoOptionsOpen,set_algoOptionsOpen] = useState(false);\r\n    const [chosenAlgo , set_chosenAlgo] = useState(\"Choose an algorithm\");\r\n    const [sortingSpeed , set_sortingSpeed] = useState(180);\r\n    const [sortDisabled, set_sortDisabled] = useState(true);\r\n    const [generateBtn_disabled, set_generateBtn_disabled] = useState(false);\r\n    const [arraySizeButton, set_arraySizeButton] = useState(false);\r\n    const [sortSpeed, set_sortSpeed] = useState(false);\r\n    const [descending, set_descending] = useState(false);\r\n    const [disableDescending, set_disableDescending] = useState(false);\r\n    const sortingAlgoList = [\r\n        \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Shell Sort\",\"Insertion Sort\", \r\n        \"Selection Sort\",\"Bubble Sort\"\r\n    ];\r\n\r\n    const [compareWindowHidden, set_CompareWindow] = useState(true);\r\n    const [compareButtonDisabled, set_compareButtonDisabled] = useState(false);\r\n    \r\n    const [arraySize, set_arraySize] = useState(150)\r\n\r\n    // random numbers generator range from 2 to 300\r\n    function generateRandom(size: number) {\r\n        let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\r\n        for (let x = 0; x < bars.length; x++)\r\n            if (bars[x]) {\r\n                bars[x].style.backgroundColor = \"#0AFFEF\"\r\n                bars[x].style.transition = '.2s ease';\r\n            } \r\n        const array = [];\r\n        for(let x = 0; x < size; x++) {\r\n            const random = Math.floor(Math.random()*(300 - 2 + 1) + 2)\r\n            array.push(random);\r\n        }\r\n        return array;\r\n    }\r\n    // THe State Randome Numbers Array\r\n    const [randomNumbers, set_randomNumbers] = useState(generateRandom(150));\r\n\r\n    function changeArraySize(n: any) {\r\n        set_arraySize(n);\r\n        set_randomNumbers(generateRandom(n));\r\n        if (!first) {\r\n            set_sortDisabled(false);\r\n        }\r\n    }\r\n\r\n    function sort() {\r\n        // check what algorithm to be use\r\n        const index = sortingAlgoList.indexOf(chosenAlgo)           \r\n        first = false;\r\n        set_sortDisabled(true);\r\n        set_arraySizeButton(true);\r\n        set_sortSpeed(true);\r\n        set_generateBtn_disabled(true)\r\n        set_disableDescending(true)\r\n\r\n        if (index === 0) MergeSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n        else if (index === 1) QuickSort(randomNumbers, sortingSpeed, descending, enablePanels)\r\n        else if (index === 2) HeapSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n        else if (index === 3) ShellSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n        else if (index === 4) InsertionSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n        else if (index === 5) SelectionSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n        else if (index === 6) BubbleSort(randomNumbers, sortingSpeed, descending, enablePanels);\r\n    }\r\n\r\n    function enablePanels(t: number) {\r\n        setTimeout(() => {\r\n            set_generateBtn_disabled(false)\r\n            set_arraySizeButton(false);\r\n            set_sortSpeed(false);\r\n            set_disableDescending(false);   \r\n        }, t * (200 - sortingSpeed))\r\n    }\r\n\r\n    function changeSpeed(n: number) {\r\n        set_sortingSpeed(n);\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            p={4}\r\n            className=\"flat\"\r\n            style={{width: '98vw', height: '80vh', position: 'relative', \r\n            margin: 'auto', top: '1rem', overflow: 'hidden',\r\n                borderRadius: '10px'\r\n            }}>\r\n            \r\n\r\n            <Box id=\"sorting-windows\">\r\n                <div className=\"bars-container\">\r\n                    <div className=\"algo-options\">\r\n                        <Box className={\"sorting-algorithms\"} hidden={!algoOptionsOpen} >\r\n                            <div style={{pointerEvents: 'none'}} > <Box p={2} pl={1}>  </Box> </div>\r\n                            {\r\n                                sortingAlgoList.map((algo: any, index: number) => \r\n                                <div key={index}> <Box p={1} pl={2}  onClick={() => {\r\n                                    set_chosenAlgo(algo);\r\n                                    set_algoOptionsOpen(false);\r\n                                    set_sortDisabled(false)}} > {algo} </Box> </div>\r\n                                )\r\n                            }\r\n                        </Box>\r\n                        <Box flex={1} onClick={()=>{set_algoOptionsOpen(!algoOptionsOpen)}} >\r\n                            {chosenAlgo}    \r\n                        </Box>                \r\n                        <Box onClick={()=>{set_algoOptionsOpen(!algoOptionsOpen)}} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" > <ArrowDropDownIcon /> </Box>\r\n                    </div>\r\n                    {\r\n                        randomNumbers.map((num: number, index: number) => \r\n                            <div className=\"bars\" style={{height: num+'px'}} key={index} > </div>\r\n                        )\r\n                    }\r\n                </div>\r\n                \r\n            </Box>\r\n\r\n            <div id=\"scroll\" >\r\n\r\n                <Box className=\"sorting-panel\">\r\n                <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                    <Button disabled={generateBtn_disabled} label=\"Generate New Array\" handleClick={() => {\r\n                            set_randomNumbers(generateRandom(arraySize));\r\n                            if (!first) {\r\n                                set_sortDisabled(false);\r\n                                first = false;\r\n                            }\r\n                        }} />\r\n                </Box>\r\n\r\n                    <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                        <Box pb={1} textAlign=\"center\" > Change Array Size </Box>\r\n                        <Slider disabled={arraySizeButton} id=\"array_size\" onInput={(n:any)=>changeArraySize(n)} color=\"accent\" min={5} max={300} value={arraySize} />\r\n                    </Box>\r\n                    <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                        <Box pb={1} textAlign=\"center\" > Change Speed </Box>\r\n                        <Slider disabled={sortSpeed} id=\"sorting-speed\" onInput={(n:any)=>changeSpeed(n)} color=\"error\" min={5} max={198} value={sortingSpeed} />\r\n                    </Box>\r\n                    <Box m={2} style={{position: 'relative', bottom: '2px'}} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                        <Box pb={1} textAlign=\"center\" > Descending </Box>\r\n                            <ToggleButton disabled={disableDescending} toggleOn={descending} color=\"accent\" title=\"Descending\" handleClick={() => {\r\n                                set_descending(!descending);\r\n                                if (!first) {\r\n                                    set_sortDisabled(false)   \r\n                                    first = false;\r\n                                }\r\n                            }} />\r\n                    </Box>\r\n\r\n                    <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n                        <ButtonAccent label=\"Sort !\" disabled={sortDisabled} handleClick={sort} title=\"Start sorting\" type=\"error\" />\r\n                    </Box>\r\n                </Box>\r\n            </div>\r\n        </Box>\r\n    )\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\inputs\\Select.tsx",[],["131","132"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\MergeSort.tsx",["133","134"],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\QuickSort.tsx",["135"],"// `\r\n// ANIMATION STRATEGY: \r\n//     Each iteraton in animations array is also an array\r\n//     that has 3 elements. \r\n// Examples:\r\n//      [CHANGE, index, pivot],\r\n//      [REVERT, index, pivot],\r\n//      [SWAP_CHANGE, index1, index2],\r\n//      [SWAP_REVERT, index1, index2]\r\n// Basically, this means that if we found a CHANGE,\r\n// we will change the color of the bars[index],\r\n// if we found a REVERT then change its color back to normal,\r\n// if SWAP_CHANGE, change their colors and swap. \r\n// That means that the height of bars[inde1] will be the \r\n// height of bars[index2] and vice versa.\r\n// Finally, if we found SWAP_REVERT we will just simply \r\n// change the color back to normal\r\n// `\r\n\r\nimport {\r\n    changeColor,\r\n    changeHeight,\r\n    PURPLE,\r\n    RED,\r\n    GREEN,\r\n    ACC\r\n} from './template.functions';\r\n\r\n//  ======================================== DEPENDENT  VARIABLES <<<\r\nlet mainArray = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\nlet isDescending = false;\r\n\r\n// ========================================= INDEPENDENT VARIABLES\r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// ==================================================== ANIMATION animate()\r\nfunction animate() {\r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n// ===================================================== PARTITION DESCENDING\r\nfunction partition_descending(left: number, right: number, PIVOT: number) {    \r\n    while (left <= right) {\r\n        // here we will push the animation comparision\r\n        // example: animation.comparision.push([left, right])\r\n        // because we are comparing left and right\r\n        while (mainArray[left] > PIVOT){\r\n            animations.push([\r\n                CHANGE,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            left++;\r\n        }\r\n        while (mainArray[right] < PIVOT){\r\n            animations.push([\r\n                CHANGE,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            right--; \r\n        }\r\n        if (left <= right) {\r\n            animations.push([\r\n                SWAP_CHANGE,\r\n                left,\r\n                right\r\n            ])\r\n            animations.push([\r\n                SWAP_REVERT,\r\n                left,\r\n                right\r\n            ])\r\n            // here I'm swapping left and aright\r\n            let temporary = mainArray[left];\r\n            mainArray[left] = mainArray[right];\r\n            mainArray[right] = temporary;\r\n\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\n// ===================================================== PARTITION ASCENDING\r\nfunction partition_ascending(left: number, right: number, PIVOT: number) {    \r\n    while (left <= right) {\r\n        // here we will push the animation comparision\r\n        // example: animations.comparision.push([left, right])\r\n        // because we are comparing left and right\r\n        while (mainArray[left] < PIVOT) {\r\n            animations.push([\r\n                CHANGE,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                left,\r\n                PIVOT\r\n            ])\r\n            left++;\r\n        }\r\n            \r\n        while (mainArray[right] > PIVOT) {\r\n            animations.push([\r\n                CHANGE,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            animations.push([\r\n                REVERT,\r\n                right,\r\n                PIVOT\r\n            ])\r\n            right--; \r\n        }\r\n               \r\n        if (left <= right) {\r\n            animations.push([\r\n                SWAP_CHANGE,\r\n                left,\r\n                right\r\n            ])\r\n            animations.push([\r\n                SWAP_REVERT,\r\n                left,\r\n                right\r\n            ])\r\n            // here I'm swapping left and aright\r\n            let temporary = mainArray[left];\r\n            mainArray[left] = mainArray[right];\r\n            mainArray[right] = temporary;\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\n// ===================================================== SORT\r\nfunction sort(left: number, right: number) {\r\n    if (left >= right)\r\n        return;\r\n    // here I choose the middle element as a PIVOT\r\n    let midIndex = (left + right) / 2;\r\n    // console.log(midIndex);\r\n    // make sure to always floor the mid to avoid infinite loop\r\n    midIndex = Math.floor(midIndex);\r\n    let PIVOT = mainArray[midIndex];\r\n    // here, partition should return the index of the pivot \r\n    // or the element that is already in correct position\r\n    let DIVIDING_POINT: number;\r\n    if(isDescending)\r\n        DIVIDING_POINT = partition_descending(left, right, PIVOT);\r\n    else\r\n        DIVIDING_POINT = partition_ascending(left, right, PIVOT);\r\n    sort(left, DIVIDING_POINT - 1);\r\n    sort(DIVIDING_POINT, right);\r\n}\r\n\r\n// ================================================== ENTRY POINT\r\nexport default function QuickSort(\r\n    numbers: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    ANIMATION_SPEED = 200 - speed;\r\n    isDescending = descending;  \r\n    mainArray = Object.assign([], numbers);\r\n    // always clear the animations \r\n    animations = [];\r\n    // ACTUAL QUICK SORT CALL\r\n\r\n    sort(0, mainArray.length - 1);\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length);\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\template.functions.ts",[],"C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\HeapSort.ts",["136"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet mainArray = [] as number[];\r\n// this will be updated using the props\r\nlet ANIMATION_SPEED = 40;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\nlet isDescending = false;\r\n\r\n// ======================================= constants Variables\r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// ======================================= ENTRY POINT\r\nexport default function HeapSort(\r\n    numbers: number[],\r\n    animation_speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean\r\n)\r\n{\r\n    ANIMATION_SPEED = 200 - animation_speed;\r\n    isDescending = descending;\r\n    mainArray = Object.assign([], numbers);\r\n    animations = [];\r\n    // actual call of heapsort algorithm\r\n    sort();\r\n    if (returnFrames) return animations;\r\n    // animate\r\n    animate();\r\n    callback(animations.length)\r\n}\r\n\r\n// ======================================== animation \r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ======================================== Sort\r\nfunction sort() {\r\n    let halfSize = mainArray.length / 2;\r\n    halfSize = Math.floor(halfSize);\r\n    \r\n    for (let x = halfSize; x >= 0; x--) {\r\n        heapify(mainArray.length, x);\r\n    }\r\n    for (let x = mainArray.length - 1; x > 0; x--)\r\n    {\r\n        animations.push([SWAP_CHANGE, x, 0])\r\n        animations.push([SWAP_REVERT, x, 0])\r\n        const temp = mainArray[0];\r\n        mainArray[0] = mainArray[x]\r\n        mainArray[x] = temp;\r\n        heapify(x, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(size: number, root: number) {\r\n    if (root >= size)\r\n        return;\r\n\r\n    let left = (2 * root) + 1;\r\n    let right = (2 * root) + 2;\r\n\r\n    if (left < size) {\r\n        // comparision\r\n        animations.push([CHANGE, left, root])\r\n        animations.push([REVERT, left, root])\r\n\r\n        if (!isDescending) {\r\n            if (mainArray[left] > mainArray[root]) {    \r\n\r\n                animations.push([SWAP_CHANGE, left, root])\r\n                animations.push([SWAP_REVERT, left, root])\r\n\r\n                const temp = mainArray[left];\r\n                mainArray[left] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }    \r\n        }\r\n        else {\r\n            if (mainArray[left] < mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, left, root])\r\n                animations.push([SWAP_REVERT, left, root])\r\n               \r\n                const temp = mainArray[left];\r\n                mainArray[left] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n            \r\n    }\r\n    if (right < size) {\r\n        // comparision\r\n        animations.push([CHANGE, right, root])\r\n        animations.push([REVERT, right, root])\r\n        if (!isDescending) {\r\n          \r\n            if (mainArray[right] > mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, right, root])\r\n                animations.push([SWAP_REVERT, right, root])\r\n               \r\n                const temp = mainArray[right];\r\n                mainArray[right] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n        else {\r\n            if (mainArray[right] < mainArray[root]) {\r\n\r\n                animations.push([SWAP_CHANGE, right, root])\r\n                animations.push([SWAP_REVERT, right, root])\r\n                \r\n                const temp = mainArray[right];\r\n                mainArray[right] = mainArray[root];\r\n                mainArray[root] = temp;\r\n            }\r\n        }\r\n    }\r\n    heapify(size, left);\r\n    heapify(size, right);\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\ShellSort.ts",["137"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function ShellSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean )\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums )\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // actual algo\r\n    let gap = Math.floor(mainArray.length / 2);\r\n    while ( gap >= 1) {\r\n        for (let j = gap; j < mainArray.length; j++) {\r\n            for (let i = j - gap; i >= 0; i -= gap) {\r\n\r\n                animations.push([CHANGE, i+gap, i])\r\n                animations.push([REVERT, i+gap, i])\r\n\r\n                if (!descending) {\r\n                    if (mainArray[i + gap] > mainArray[i]) break;    \r\n                }else\r\n                    if (mainArray[i + gap] < mainArray[i]) break;    \r\n                \r\n                animations.push([SWAP_CHANGE, i+gap, i])\r\n                animations.push([SWAP_REVERT, i+gap, i])\r\n\r\n                const temp = mainArray[i + gap]\r\n                mainArray[i + gap] = mainArray[i]\r\n                mainArray[i] = temp;\r\n            }\r\n        }\r\n        gap = Math.floor(gap / 2)\r\n    }\r\n\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length);\r\n}","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\InsertionSort.ts",["138"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function InsertionSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean) \r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums )\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // actual algo\r\n    let size = mainArray.length;\r\n    for (let x = 1; x < size; x++)\r\n    {\r\n        animations.push([CHANGE, x, x-1])\r\n        animations.push([REVERT, x, x-1])\r\n\r\n        if (!descending) {\r\n            if (mainArray[x - 1] > mainArray[x])\r\n            {\r\n                for (let y = x; y > 0; y--)\r\n                {\r\n                    animations.push([CHANGE, y, y-1])\r\n                    animations.push([REVERT, y, y-1])\r\n\r\n                    if (mainArray[y] < mainArray[y - 1]) {\r\n\r\n                        animations.push([SWAP_CHANGE, y, y-1])\r\n                        animations.push([SWAP_REVERT, y, y-1])\r\n\r\n                        const temp = mainArray[y];\r\n                        mainArray[y] = mainArray[y - 1]\r\n                        mainArray[y - 1] = temp\r\n                    }\r\n                }\r\n            }            \r\n        }\r\n        else {\r\n            if (mainArray[x - 1] < mainArray[x])\r\n            {\r\n                for (let y = x; y > 0; y--)\r\n                {\r\n                    animations.push([CHANGE, y, y-1])\r\n                    animations.push([REVERT, y, y-1])\r\n\r\n                    if (mainArray[y] > mainArray[y - 1]) {\r\n\r\n                        animations.push([SWAP_CHANGE, y, y-1])\r\n                        animations.push([SWAP_REVERT, y, y-1])\r\n\r\n                        const temp = mainArray[y];\r\n                        mainArray[y] = mainArray[y - 1]\r\n                        mainArray[y - 1] = temp\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)\r\n}\r\n    ","C:\\Users\\eeche\\Documents\\Development\\Projects\\visualizer\\src\\components\\visualizers\\sortingAlgorithms\\SelectionSort.ts",["139"],"import {\r\n    changeColor,\r\n    changeHeight,\r\n    ACC, RED, PURPLE, GREEN\r\n}\r\n    from './template.functions'\r\n\r\n// ======================================= dependent Variables\r\nlet ANIMATION_SPEED = 40;\r\nlet mainArray = [] as any;\r\n// containers of Animation Sequence\r\nlet animations = [] as any;\r\n\r\n// ======================================= constants \r\n// this will be use for identifyig \r\n// animation sequences\r\nconst CHANGE = \"change\";\r\nconst REVERT = \"revert\";\r\nconst SWAP_CHANGE = \"swap_change\";\r\nconst SWAP_REVERT = \"swap_revert\";\r\n\r\n// =========================================== ANIMATE\r\n\r\nfunction animate() {\r\n    \r\n    for (let x = 0; x < animations.length; x++) {\r\n        const STATE = animations[x][0];\r\n        const VALUE_1 = animations[x][1];\r\n        const VALUE_2 = animations[x][2];\r\n        if (STATE === CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, PURPLE);\r\n                changeColor(VALUE_2, RED);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === REVERT) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else if (STATE === SWAP_CHANGE) {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, GREEN);\r\n                changeColor(VALUE_2, GREEN);\r\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\r\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                changeColor(VALUE_1, ACC);\r\n                changeColor(VALUE_2, ACC);\r\n            }, x * ANIMATION_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// =========================================== ENTRY POINT\r\nexport default function SelectionSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums)\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // act ual algo\r\n    let size = mainArray.length\r\n    var i: number, j: number, min_idx: number;\r\n\r\n    for (i = 0; i < size - 1; i++)\r\n    {\r\n        min_idx = i;\r\n\r\n        for (j = i + 1; j < size; j++) {\r\n            \r\n            animations.push([CHANGE, j, min_idx])\r\n            animations.push([REVERT, j, min_idx])\r\n            if (descending) {\r\n                if (mainArray[j] > mainArray[min_idx]) min_idx = j;\r\n            }\r\n            else {\r\n                if (mainArray[j] < mainArray[min_idx]) min_idx = j;\r\n            }\r\n        }\r\n        animations.push([SWAP_CHANGE, i, min_idx])\r\n        animations.push([SWAP_REVERT, i, min_idx])\r\n\r\n        const temp = mainArray[min_idx]\r\n        mainArray[min_idx] = mainArray[i]\r\n        mainArray[i] = temp;\r\n    }\r\n    // animations start\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)    \r\n}\r\n\r\nexport function BubbleSort(\r\n    nums: number[],\r\n    speed: number,\r\n    descending: boolean,\r\n    callback: Function,\r\n    returnFrames?: boolean)\r\n{\r\n    mainArray = new Array(nums.length)\r\n    mainArray = Object.assign([], nums)\r\n\r\n    ANIMATION_SPEED = 200 - speed;\r\n    animations = [];\r\n\r\n    // act ual algo\r\n    let size = mainArray.length\r\n\r\n    for (let i = 0; i < size - 1; i++)\r\n    {\r\n        for (let j = i + 1; j < size; j++) {\r\n\r\n            animations.push([CHANGE, i, j])\r\n            animations.push([REVERT, i, j])\r\n\r\n            if (!descending) {\r\n                if (mainArray[i] > mainArray[j]) {\r\n                    animations.push([SWAP_CHANGE, i, j])        \r\n                    animations.push([SWAP_REVERT, i, j])  \r\n                    const temp = mainArray[i]      \r\n                    mainArray[i] = mainArray[j]\r\n                    mainArray[j] = temp;\r\n                }\r\n            }\r\n            else {\r\n                if (mainArray[i] < mainArray[j]) {\r\n                    animations.push([SWAP_CHANGE, i, j])        \r\n                    animations.push([SWAP_REVERT, i, j])   \r\n                    const temp = mainArray[i]     \r\n                    mainArray[i] = mainArray[j]\r\n                    mainArray[j] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // animations start\r\n    if (returnFrames) return animations;\r\n    animate();\r\n    callback(animations.length)    \r\n}",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":6,"column":22,"nodeType":"148","messageId":"149","endLine":6,"endColumn":34},{"ruleId":"140","replacedBy":"150"},{"ruleId":"142","replacedBy":"151"},{"ruleId":"146","severity":1,"message":"152","line":1,"column":9,"nodeType":"148","messageId":"149","endLine":1,"endColumn":17},{"ruleId":"140","replacedBy":"153"},{"ruleId":"142","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":21,"column":61,"nodeType":"157","messageId":"158","endLine":21,"endColumn":63},{"ruleId":"146","severity":1,"message":"159","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":18},{"ruleId":"146","severity":1,"message":"160","line":38,"column":12,"nodeType":"148","messageId":"149","endLine":38,"endColumn":31},{"ruleId":"146","severity":1,"message":"161","line":38,"column":33,"nodeType":"148","messageId":"149","endLine":38,"endColumn":50},{"ruleId":"146","severity":1,"message":"162","line":39,"column":12,"nodeType":"148","messageId":"149","endLine":39,"endColumn":33},{"ruleId":"146","severity":1,"message":"163","line":39,"column":35,"nodeType":"148","messageId":"149","endLine":39,"endColumn":60},{"ruleId":"140","replacedBy":"164"},{"ruleId":"142","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":26,"column":24,"nodeType":"168","messageId":"169","endLine":30,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":34,"column":24,"nodeType":"168","messageId":"169","endLine":36,"endColumn":14},{"ruleId":"166","severity":1,"message":"170","line":64,"column":24,"nodeType":"168","messageId":"169","endLine":69,"endColumn":14},{"ruleId":"166","severity":1,"message":"170","line":65,"column":24,"nodeType":"168","messageId":"169","endLine":70,"endColumn":14},{"ruleId":"166","severity":1,"message":"170","line":43,"column":24,"nodeType":"168","messageId":"169","endLine":48,"endColumn":14},{"ruleId":"166","severity":1,"message":"170","line":43,"column":24,"nodeType":"168","messageId":"169","endLine":48,"endColumn":14},{"ruleId":"166","severity":1,"message":"170","line":43,"column":24,"nodeType":"168","messageId":"169","endLine":48,"endColumn":14},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],["171"],["172"],"@typescript-eslint/no-unused-vars","'set_disabled' is assigned a value but never used.","Identifier","unusedVar",["171"],["172"],"'useState' is defined but never used.",["171"],["172"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ButtonText' is defined but never used.","'compareWindowHidden' is assigned a value but never used.","'set_CompareWindow' is assigned a value but never used.","'compareButtonDisabled' is assigned a value but never used.","'set_compareButtonDisabled' is assigned a value but never used.",["171"],["172"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'animations', 'animations'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'mainArray', 'mainArray'.","no-global-assign","no-unsafe-negation"]